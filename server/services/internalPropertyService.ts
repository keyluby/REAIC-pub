import { db } from '../db';
import { 
  scrapedProperties, 
  propertyImages, 
  scrapedWebsites,
  type ScrapedProperty 
} from '@shared/schema';
import { eq, and, like, gte, lte, desc, sql } from 'drizzle-orm';

interface PropertyFilters {
  location?: string;
  search?: string;
  listingType?: string; // "sale" or "rent"
  propertyType?: string; // "apartment", "house", "villa", etc.
  priceMin?: number;
  priceMax?: number;
  bedroomsMin?: number;
  bedroomsMax?: number;
  bathroomsMin?: number;
  bathroomsMax?: number;
  areaMin?: number;
  areaMax?: number;
  currency?: string;
}

interface PropertyWithImages extends ScrapedProperty {
  images: Array<{
    id: string;
    imageUrl: string;
    isFeatured: boolean | null;
    altText: string | null;
  }>;
}

export class InternalPropertyService {
  /**
   * B√∫squeda inteligente de propiedades basada en consulta natural
   */
  async intelligentPropertySearch(
    userId: string, 
    query: string, 
    userLocation?: string
  ): Promise<PropertyWithImages[]> {
    try {
      console.log(`üîç [INTERNAL] Intelligent search for user ${userId}: "${query}"`);
      
      // Analizar la consulta para extraer criterios de b√∫squeda
      const filters = this.parseSearchQuery(query);
      
      // Si hay ubicaci√≥n del usuario, agregarla
      if (userLocation && !filters.location) {
        filters.search = userLocation;
      }
      
      const properties = await this.searchProperties(userId, filters);
      
      // Limitar a las primeras 10 propiedades para respuestas eficientes
      const limitedProperties = properties.slice(0, 10);
      
      console.log(`‚úÖ [INTERNAL] Found ${limitedProperties.length} properties matching criteria`);
      return limitedProperties;
      
    } catch (error) {
      console.error('‚ùå [INTERNAL] Error in intelligent search:', error);
      throw error;
    }
  }

  /**
   * Buscar propiedades con filtros espec√≠ficos
   */
  async searchProperties(userId: string, filters: PropertyFilters = {}): Promise<PropertyWithImages[]> {
    try {
      console.log('üèòÔ∏è [INTERNAL] Searching properties with filters:', filters);
      
      let query = db
        .select()
        .from(scrapedProperties)
        .where(
          and(
            eq(scrapedProperties.userId, userId),
            eq(scrapedProperties.isAvailable, true)
          )
        );

      // Construir filtros din√°micamente
      const conditions = [
        eq(scrapedProperties.userId, userId),
        eq(scrapedProperties.isAvailable, true)
      ];

      // Filtro de b√∫squeda por texto
      if (filters.search) {
        conditions.push(
          sql`(${scrapedProperties.title} ILIKE ${'%' + filters.search + '%'} 
              OR ${scrapedProperties.description} ILIKE ${'%' + filters.search + '%'}
              OR ${scrapedProperties.location} ILIKE ${'%' + filters.search + '%'}
              OR ${scrapedProperties.city} ILIKE ${'%' + filters.search + '%'}
              OR ${scrapedProperties.sector} ILIKE ${'%' + filters.search + '%'})`
        );
      }

      // Filtro de ubicaci√≥n espec√≠fica
      if (filters.location) {
        conditions.push(
          sql`(${scrapedProperties.location} ILIKE ${'%' + filters.location + '%'}
              OR ${scrapedProperties.city} ILIKE ${'%' + filters.location + '%'}
              OR ${scrapedProperties.sector} ILIKE ${'%' + filters.location + '%'})`
        );
      }

      // Filtro de tipo de operaci√≥n
      if (filters.listingType) {
        conditions.push(eq(scrapedProperties.listingType, filters.listingType));
      }

      // Filtro de tipo de propiedad
      if (filters.propertyType) {
        conditions.push(eq(scrapedProperties.propertyType, filters.propertyType));
      }

      // Filtros de precio (solo si las columnas no son null)
      if (filters.priceMin && filters.priceMax) {
        conditions.push(
          sql`${scrapedProperties.price} IS NOT NULL AND ${scrapedProperties.price} >= ${filters.priceMin} AND ${scrapedProperties.price} <= ${filters.priceMax}`
        );
      } else if (filters.priceMin) {
        conditions.push(
          sql`${scrapedProperties.price} IS NOT NULL AND ${scrapedProperties.price} >= ${filters.priceMin}`
        );
      } else if (filters.priceMax) {
        conditions.push(
          sql`${scrapedProperties.price} IS NOT NULL AND ${scrapedProperties.price} <= ${filters.priceMax}`
        );
      }

      // Filtros de habitaciones
      if (filters.bedroomsMin && filters.bedroomsMax) {
        conditions.push(
          sql`${scrapedProperties.bedrooms} IS NOT NULL AND ${scrapedProperties.bedrooms} >= ${filters.bedroomsMin} AND ${scrapedProperties.bedrooms} <= ${filters.bedroomsMax}`
        );
      } else if (filters.bedroomsMin) {
        conditions.push(
          sql`${scrapedProperties.bedrooms} IS NOT NULL AND ${scrapedProperties.bedrooms} >= ${filters.bedroomsMin}`
        );
      }

      // Filtros de ba√±os
      if (filters.bathroomsMin && filters.bathroomsMax) {
        conditions.push(
          sql`${scrapedProperties.bathrooms} IS NOT NULL AND ${scrapedProperties.bathrooms} >= ${filters.bathroomsMin} AND ${scrapedProperties.bathrooms} <= ${filters.bathroomsMax}`
        );
      } else if (filters.bathroomsMin) {
        conditions.push(
          sql`${scrapedProperties.bathrooms} IS NOT NULL AND ${scrapedProperties.bathrooms} >= ${filters.bathroomsMin}`
        );
      }

      // Filtros de √°rea
      if (filters.areaMin && filters.areaMax) {
        conditions.push(
          sql`${scrapedProperties.area} IS NOT NULL AND ${scrapedProperties.area} >= ${filters.areaMin} AND ${scrapedProperties.area} <= ${filters.areaMax}`
        );
      } else if (filters.areaMin) {
        conditions.push(
          sql`${scrapedProperties.area} IS NOT NULL AND ${scrapedProperties.area} >= ${filters.areaMin}`
        );
      }

      // Filtro de moneda
      if (filters.currency) {
        conditions.push(eq(scrapedProperties.currency, filters.currency));
      }

      // Aplicar todas las condiciones
      const properties = await db
        .select()
        .from(scrapedProperties)
        .where(and(...conditions))
        .orderBy(desc(scrapedProperties.createdAt))
        .limit(50);

      // Cargar im√°genes para cada propiedad
      const propertiesWithImages: PropertyWithImages[] = await Promise.all(
        properties.map(async (property) => {
          const images = await db
            .select({
              id: propertyImages.id,
              imageUrl: propertyImages.imageUrl,
              isFeatured: propertyImages.isFeatured,
              altText: propertyImages.altText
            })
            .from(propertyImages)
            .where(eq(propertyImages.propertyId, property.id))
            .orderBy(desc(propertyImages.isFeatured), propertyImages.sortOrder);

          return {
            ...property,
            images: images || []
          };
        })
      );

      console.log(`üèòÔ∏è [INTERNAL] Found ${propertiesWithImages.length} properties`);
      return propertiesWithImages;
      
    } catch (error) {
      console.error('‚ùå [INTERNAL] Error searching properties:', error);
      throw new Error('Error al buscar propiedades internas');
    }
  }

  /**
   * Obtener detalles completos de una propiedad por ID
   */
  async getPropertyDetail(userId: string, propertyId: string): Promise<PropertyWithImages | null> {
    try {
      console.log(`üè† [INTERNAL] Getting property detail for: ${propertyId}`);
      
      const [property] = await db
        .select()
        .from(scrapedProperties)
        .where(
          and(
            eq(scrapedProperties.id, propertyId),
            eq(scrapedProperties.userId, userId)
          )
        );

      if (!property) {
        return null;
      }

      // Cargar im√°genes
      const images = await db
        .select({
          id: propertyImages.id,
          imageUrl: propertyImages.imageUrl,
          isFeatured: propertyImages.isFeatured,
          altText: propertyImages.altText
        })
        .from(propertyImages)
        .where(eq(propertyImages.propertyId, property.id))
        .orderBy(desc(propertyImages.isFeatured), propertyImages.sortOrder);

      console.log(`üè† [INTERNAL] Property detail retrieved: ${property.title}`);
      
      return {
        ...property,
        images: images || []
      };
      
    } catch (error) {
      console.error(`‚ùå [INTERNAL] Error getting property detail:`, error);
      throw new Error('Error al obtener detalles de la propiedad');
    }
  }

  /**
   * Analizar consulta de texto natural para extraer filtros
   */
  private parseSearchQuery(query: string): PropertyFilters {
    const filters: PropertyFilters = {};
    const queryLower = query.toLowerCase();
    
    // Detectar tipo de operaci√≥n
    if (queryLower.includes('alqui') || queryLower.includes('rent')) {
      filters.listingType = 'rent';
    } else if (queryLower.includes('vent') || queryLower.includes('compr')) {
      filters.listingType = 'sale';
    }
    
    // Detectar tipo de propiedad
    if (queryLower.includes('apartament') || queryLower.includes('apart')) {
      filters.propertyType = 'apartment';
    } else if (queryLower.includes('casa') || queryLower.includes('house')) {
      filters.propertyType = 'house';
    } else if (queryLower.includes('penthouse')) {
      filters.propertyType = 'penthouse';
    } else if (queryLower.includes('villa')) {
      filters.propertyType = 'villa';
    } else if (queryLower.includes('lote') || queryLower.includes('terreno')) {
      filters.propertyType = 'lot';
    }
    
    // Detectar n√∫mero de habitaciones
    const roomsMatch = queryLower.match(/(\d+)\s*(hab|habitac|room|rec√°mar|dormitor)/);
    if (roomsMatch) {
      filters.bedroomsMin = parseInt(roomsMatch[1]);
    }
    
    // Detectar n√∫mero de ba√±os
    const bathsMatch = queryLower.match(/(\d+)\s*(ba√±o|bathroom|bath)/);
    if (bathsMatch) {
      filters.bathroomsMin = parseInt(bathsMatch[1]);
    }
    
    // Detectar rango de precio
    const priceMatch = queryLower.match(/(\d+(?:,\d+)*(?:\.\d+)?)\s*(usd|dollar|peso)/);
    if (priceMatch) {
      const price = parseFloat(priceMatch[1].replace(/,/g, ''));
      filters.currency = priceMatch[2].includes('usd') || priceMatch[2].includes('dollar') ? 'USD' : 'RD$';
      
      // Si es menor a 200k, asumimos es el m√°ximo
      if (price < 200000) {
        filters.priceMax = price;
      } else {
        filters.priceMin = price;
      }
    }
    
    // Detectar ubicaciones espec√≠ficas
    const dominicanLocations = [
      'santo domingo', 'santiago', 'punta cana', 'puerto plata', 'la romana',
      'bella vista', 'naco', 'piantini', 'gazcue', 'zona colonial', 'los prados',
      'evaristo morales', 'la esperilla', 'serralles', 'mirador sur', 'la julia',
      'nuevas terrazas', 'arroyo hondo', 'costa del sol', 'juan dolio'
    ];
    
    dominicanLocations.forEach(location => {
      if (queryLower.includes(location)) {
        filters.location = location;
      }
    });
    
    console.log('üîç [INTERNAL] Parsed filters:', filters);
    return filters;
  }

  /**
   * Formatear propiedades para respuesta de IA
   */
  formatPropertiesForAI(properties: PropertyWithImages[]): string {
    if (properties.length === 0) {
      return 'No encontr√© propiedades que coincidan con tus criterios en nuestra base de datos. ¬øTe gustar√≠a ajustar tu b√∫squeda o que configure nuevos sitios web para extraer m√°s propiedades?';
    }
    
    const formatted = properties.map((property, index) => {
      // Formatear precio
      let formattedPrice = 'Precio a consultar';
      if (property.price && typeof property.price === 'number') {
        const price = new Intl.NumberFormat('es-DO', {
          style: 'currency',
          currency: property.currency || 'USD'
        }).format(property.price);
        formattedPrice = price;
      } else if (property.priceText) {
        formattedPrice = property.priceText;
      }
      
      // Formatear caracter√≠sticas
      const rooms = property.bedrooms ? `${property.bedrooms} hab` : '';
      const baths = property.bathrooms ? `${property.bathrooms} ba√±os` : '';
      const area = property.area ? `${property.area}${property.areaUnit || 'm¬≤'}` : '';
      const details = [rooms, baths, area].filter(Boolean).join(', ');
      
      // Emoji por tipo de propiedad
      const propertyEmoji = this.getPropertyEmoji(property.propertyType);
      
      return `${index + 1}. **${property.title}** ${propertyEmoji}
   - **Precio**: ${formattedPrice}
   - **Ubicaci√≥n**: ${property.sector ? `${property.sector}, ` : ''}${property.city || 'Ubicaci√≥n no especificada'}
   ${details ? `- **Caracter√≠sticas**: ${details}` : ''}
   ${property.description ? `- **Descripci√≥n**: ${property.description.substring(0, 100)}${property.description.length > 100 ? '...' : ''}` : ''}
   - **Ver m√°s**: ${property.sourceUrl}
   - **ID**: ${property.id}`;
    }).join('\n\n');
    
    return formatted + '\n\n¬øTe interesa alguna de estas propiedades? Puedo enviarte m√°s detalles, fotos o ayudarte a programar una visita.';
  }

  /**
   * Obtener emoji seg√∫n tipo de propiedad
   */
  private getPropertyEmoji(propertyType?: string): string {
    const emojiMap: { [key: string]: string } = {
      'apartment': 'üè¢',
      'house': 'üè†',
      'villa': 'üè°',
      'penthouse': 'üèôÔ∏è',
      'lot': 'üóæ',
      'commercial': 'üè¨',
      'office': 'üè¢',
      'warehouse': 'üè≠'
    };
    
    return emojiMap[propertyType || ''] || 'üè†';
  }

  /**
   * Formatear propiedades para carrusel interactivo de WhatsApp
   */
  formatPropertiesForCarousel(properties: PropertyWithImages[]): Array<{
    imageUrl: string;
    title: string;
    price: string;
    description: string;
    propertyUrl: string;
    uid: string;
    id: string;
  }> {
    return properties.map(property => {
      // Formatear precio
      let formattedPrice = 'Precio a consultar';
      if (property.price && typeof property.price === 'number') {
        const currency = property.currency || 'RD$';
        formattedPrice = `${currency} ${property.price.toLocaleString()}`;
      } else if (property.priceText) {
        formattedPrice = property.priceText;
      }

      // Obtener imagen principal
      const featuredImage = property.images.find(img => img.isFeatured) || property.images[0];
      const imageUrl = featuredImage?.imageUrl || 'https://via.placeholder.com/400x300?text=Sin+Imagen';

      // Formatear descripci√≥n corta
      const rooms = property.bedrooms || 0;
      const bathrooms = property.bathrooms || 0;
      const location = property.sector || property.city || 'Ubicaci√≥n no especificada';
      const description = `${rooms} hab ‚Ä¢ ${bathrooms} ba√±os\n${location}`;

      return {
        imageUrl,
        title: property.title || 'Propiedad sin nombre',
        price: formattedPrice,
        description,
        propertyUrl: property.sourceUrl,
        uid: property.id, // Usar el ID interno como uid
        id: property.id
      };
    });
  }

  /**
   * Obtener galer√≠a de fotos de una propiedad espec√≠fica
   */
  async getPropertyMedia(userId: string, propertyId: string): Promise<{
    images: string[];
    videos: string[];
    featuredImage?: string;
    virtualTour?: string;
  }> {
    try {
      console.log(`üì∏ [INTERNAL] Getting media for property: ${propertyId}`);
      
      const property = await this.getPropertyDetail(userId, propertyId);
      
      if (!property) {
        throw new Error('Property not found');
      }
      
      const images = property.images.map(img => img.imageUrl);
      const featuredImage = property.images.find(img => img.isFeatured)?.imageUrl || undefined;
      
      const media = {
        images: images || [],
        videos: [], // TODO: Implementar soporte para videos
        featuredImage,
        virtualTour: undefined // TODO: Implementar soporte para tours virtuales
      };
      
      console.log(`üì∏ [INTERNAL] Found ${media.images.length} images for property ${propertyId}`);
      if (media.featuredImage) console.log(`üåü [INTERNAL] Featured image available`);
      
      return media;
      
    } catch (error) {
      console.error(`‚ùå [INTERNAL] Error getting property media:`, error);
      throw new Error('Error al obtener medios de la propiedad');
    }
  }

  /**
   * Validar si el sistema de scraping est√° configurado para un usuario
   */
  async isScrapingEnabled(userId: string): Promise<boolean> {
    try {
      const websites = await db
        .select()
        .from(scrapedWebsites)
        .where(
          and(
            eq(scrapedWebsites.userId, userId),
            eq(scrapedWebsites.isActive, true)
          )
        )
        .limit(1);

      return websites.length > 0;
    } catch (error) {
      console.error('‚ùå [INTERNAL] Error checking scraping status:', error);
      return false;
    }
  }

  /**
   * Obtener estad√≠sticas de propiedades para un usuario
   */
  async getPropertyStats(userId: string): Promise<{
    totalProperties: number;
    activeWebsites: number;
    propertiesForSale: number;
    propertiesForRent: number;
    avgPrice: number;
  }> {
    try {
      const [stats] = await db
        .select({
          totalProperties: sql<number>`count(*)`,
          propertiesForSale: sql<number>`count(*) filter (where listing_type = 'sale')`,
          propertiesForRent: sql<number>`count(*) filter (where listing_type = 'rent')`,
          avgPrice: sql<number>`avg(price) filter (where price is not null)`
        })
        .from(scrapedProperties)
        .where(
          and(
            eq(scrapedProperties.userId, userId),
            eq(scrapedProperties.isAvailable, true)
          )
        );

      const [websiteCount] = await db
        .select({
          activeWebsites: sql<number>`count(*)`
        })
        .from(scrapedWebsites)
        .where(
          and(
            eq(scrapedWebsites.userId, userId),
            eq(scrapedWebsites.isActive, true)
          )
        );

      return {
        totalProperties: stats?.totalProperties || 0,
        activeWebsites: websiteCount?.activeWebsites || 0,
        propertiesForSale: stats?.propertiesForSale || 0,
        propertiesForRent: stats?.propertiesForRent || 0,
        avgPrice: stats?.avgPrice || 0
      };
    } catch (error) {
      console.error('‚ùå [INTERNAL] Error getting property stats:', error);
      return {
        totalProperties: 0,
        activeWebsites: 0,
        propertiesForSale: 0,
        propertiesForRent: 0,
        avgPrice: 0
      };
    }
  }
}

export const internalPropertyService = new InternalPropertyService();