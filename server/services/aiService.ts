import OpenAI from "openai";

// Queue para media pendientes de env√≠o
const pendingMediaQueue = new Map<string, any>();

export class AIService {
  private openaiClient: OpenAI;
  private conversationContexts = new Map<string, any[]>();

  constructor() {
    const apiKey = process.env.OPENAI_API_KEY || '';
    if (!apiKey) {
      console.error('‚ùå OPENAI_API_KEY environment variable is not set');
    } else {
      console.log('‚úÖ OpenAI API key is configured');
    }
    
    this.openaiClient = new OpenAI({ 
      apiKey: apiKey
    });
  }

  async processConversation(userId: string, conversationId: string, message: string, context: any = {}) {
    try {
      console.log(`ü§ñ Processing AI conversation for user ${userId}, conversation ${conversationId}`);
      console.log(`üìù User message: "${message}"`);
      
      // Check if AlterEstate integration is enabled
      if (context.alterEstateEnabled && context.alterEstateToken) {
        console.log('üèòÔ∏è [AI] AlterEstate integration enabled, checking for property search intent');
        
        // FIRST: Check if user is requesting property media (photos/videos) - this has priority
        if (this.isRequestingPropertyMedia(message)) {
          console.log('üì∏ [AI] Property media request detected');
          return await this.processPropertyMediaRequest(message, context, conversationId);
        }
        
        // SECOND: Detect if user is searching for properties
        const intent = await this.detectIntent(message);
        
        if (intent.intent === 'search_property' && intent.confidence > 0.6) {
          console.log('üîç [AI] Property search intent detected, querying AlterEstate');
          return await this.processPropertySearch(message, context, conversationId);
        }
      }
      
      // Get conversation context
      const conversationContext = this.conversationContexts.get(conversationId) || [];
      
      // Build system prompt
      const systemPrompt = this.buildSystemPrompt(context);
      
      // Prepare messages for OpenAI
      const messages = [
        { role: "system", content: systemPrompt },
        ...conversationContext,
        { role: "user", content: message }
      ];

      console.log(`üì§ Sending request to OpenAI with ${messages.length} messages`);

      // Usando GPT-4o temporalmente para estabilidad
      const response = await this.openaiClient.chat.completions.create({
        model: "gpt-4o", // Usando GPT-4o temporalmente para estabilidad
        messages: messages as any,
        max_tokens: 500,
        temperature: 0.7,
      });

      const aiResponse = response.choices[0].message.content || '';
      console.log(`‚úÖ AI response received: "${aiResponse}"`);

      // Update conversation context
      conversationContext.push(
        { role: "user", content: message },
        { role: "assistant", content: aiResponse }
      );

      // Keep only last 10 messages for context
      if (conversationContext.length > 20) {
        conversationContext.splice(0, conversationContext.length - 20);
      }

      this.conversationContexts.set(conversationId, conversationContext);

      return aiResponse;
    } catch (error: any) {
      console.error('‚ùå Error processing conversation with AI:');
      console.error('Error details:', error.response?.data || error.message);
      console.error('Status:', error.response?.status);
      console.error('Full error:', error);
      
      // Return a fallback message instead of throwing
      return 'Disculpa, estoy teniendo problemas t√©cnicos en este momento. ¬øPodr√≠as repetir tu mensaje en unos minutos?';
    }
  }

  private buildSystemPrompt(context: any): string {
    const assistantName = context.assistantName || 'Asistente IA';
    
    // Use custom system prompt if provided, otherwise use default
    if (context.customSystemPrompt && context.customSystemPrompt.trim()) {
      return context.customSystemPrompt;
    }
    
    return this.getDefaultSystemPrompt(assistantName, context.alterEstateEnabled);
  }

  private getDefaultSystemPrompt(assistantName: string, alterEstateEnabled: boolean = false): string {
    return `Eres ${assistantName}, un asistente de ventas inmobiliarias experto. Tu objetivo es ayudar a los clientes a encontrar la propiedad perfecta de manera conversacional y humana.

PERSONALIDAD:
- Profesional pero amigable
- Emp√°tico y consultivo
- Orientado a soluciones
- Paciente y detallado

PROCESO DE CALIFICACI√ìN:
1. Saludo personalizado
2. Determinar tipo de b√∫squeda (compra/alquiler)
3. Establecer presupuesto y moneda
4. Identificar ubicaci√≥n preferida
5. Determinar caracter√≠sticas requeridas
6. Mostrar opciones relevantes
7. Agendar visita si hay inter√©s

REGLAS:
- Siempre pregunta antes de mostrar propiedades
- M√°ximo 3 propiedades por respuesta
- Incluye detalles relevantes cuando muestres propiedades
- Usa informaci√≥n actualizada del CRM
- Ofrece agendar visitas cuando hay inter√©s
- Si el cliente quiere hablar con una persona real, indica que puedes transferir la conversaci√≥n${alterEstateEnabled ? '\n- ‚ö†Ô∏è IMPORTANTE: Cuando se requiera informaci√≥n sobre propiedades, SOLAMENTE proporciona datos que se encuentren en AlterEstate CRM. NO inventes ni uses informaci√≥n general sobre propiedades que no est√© disponible en el sistema CRM.' : ''}

FORMATO DE RESPUESTA:
- Usa emojis apropiados pero con moderaci√≥n
- Mant√©n un tono profesional pero cercano
- Haz preguntas espec√≠ficas para entender mejor las necesidades
- Proporciona informaci√≥n valiosa en cada respuesta`;
  }

  async generatePropertyRecommendations(userPreferences: any, availableProperties: any[]) {
    try {
      const prompt = `Bas√°ndote en las siguientes preferencias del cliente:
${JSON.stringify(userPreferences, null, 2)}

Y las siguientes propiedades disponibles:
${JSON.stringify(availableProperties.slice(0, 10), null, 2)}

Recomienda las 3 mejores propiedades que mejor se ajusten a las necesidades del cliente. 
Responde en formato JSON con esta estructura:
{
  "recommendations": [
    {
      "propertyId": "string",
      "matchScore": number,
      "reasons": ["reason1", "reason2"],
      "highlights": "string"
    }
  ]
}`;

      const response = await this.openaiClient.chat.completions.create({
        model: "gpt-4o", // Usando GPT-4o temporalmente para estabilidad
        messages: [{ role: "user", content: prompt }],
        response_format: { type: "json_object" },
        max_tokens: 800,
        temperature: 0.7,
      });

      return JSON.parse(response.choices[0].message.content || '{"recommendations": []}');
    } catch (error) {
      console.error('Error generating property recommendations:', error);
      throw new Error('Failed to generate property recommendations');
    }
  }

  async transcribeAudio(audioBuffer: Buffer, mimeType: string = 'audio/wav'): Promise<string> {
    try {
      console.log(`üé§ [AI] Transcribing audio of ${audioBuffer.length} bytes`);
      
      // Create a temporary file for the audio
      const tempFile = new File([audioBuffer], 'audio.wav', { type: mimeType });
      
      const transcription = await this.openaiClient.audio.transcriptions.create({
        file: tempFile,
        model: "whisper-1",
        language: "es", // Spanish for real estate context
      });

      console.log(`‚úÖ [AI] Audio transcribed: "${transcription.text}"`);
      return transcription.text;
    } catch (error) {
      console.error('‚ùå [AI] Error transcribing audio:', error);
      throw new Error('Failed to transcribe audio');
    }
  }

  async analyzeImage(imageBase64: string): Promise<string> {
    try {
      const response = await this.openaiClient.chat.completions.create({
        model: "gpt-4o", // Usando GPT-4o temporalmente para estabilidad
        messages: [
          {
            role: "user",
            content: [
              {
                type: "text",
                text: "Analiza esta imagen en el contexto de bienes ra√≠ces. Describe lo que ves y si podr√≠a ser relevante para una b√∫squeda de propiedades. Responde como un asistente inmobiliario profesional en espa√±ol, siendo √∫til y espec√≠fico."
              },
              {
                type: "image_url",
                image_url: {
                  url: `data:image/jpeg;base64,${imageBase64}`
                }
              }
            ],
          },
        ],
        max_tokens: 300,
        temperature: 0.7,
      });

      return response.choices[0].message.content || 'No pude analizar la imagen';
    } catch (error) {
      console.error('Error analyzing image:', error);
      throw new Error('Failed to analyze image');
    }
  }

  async detectIntent(message: string): Promise<{
    intent: string;
    confidence: number;
    entities?: any;
  }> {
    try {
      const prompt = `Analiza el siguiente mensaje de un cliente de bienes ra√≠ces y determina la intenci√≥n principal:

Mensaje: "${message}"

Posibles intenciones:
- "search_property": buscar propiedades
- "schedule_appointment": agendar cita
- "ask_question": hacer pregunta general
- "request_info": solicitar informaci√≥n espec√≠fica
- "escalate_human": hablar con persona real
- "greeting": saludo
- "complaint": queja o problema
- "goodbye": despedida

Responde en formato JSON:
{
  "intent": "string",
  "confidence": number (0-1),
  "entities": {
    "budget": number_or_null,
    "location": "string_or_null",
    "property_type": "string_or_null",
    "urgency": "low|medium|high"
  }
}`;

      const response = await this.openaiClient.chat.completions.create({
        model: "gpt-4o", // Usando GPT-4o temporalmente para estabilidad  
        messages: [{ role: "user", content: prompt }],
        response_format: { type: "json_object" },
        max_tokens: 500,
        temperature: 0.7,
      });

      return JSON.parse(response.choices[0].message.content || '{"intent": "ask_question", "confidence": 0.5}');
    } catch (error) {
      console.error('Error detecting intent:', error);
      return { intent: "ask_question", confidence: 0.5 };
    }
  }

  /**
   * Procesar b√∫squeda de propiedades usando AlterEstate
   */
  private async processPropertySearch(message: string, context: any, conversationId: string): Promise<string> {
    try {
      const { alterEstateService } = await import('./alterEstateService');
      
      // Buscar propiedades reales usando AlterEstate
      console.log('üîç [AI] Searching real properties in AlterEstate');
      const properties = await alterEstateService.intelligentPropertySearch(
        context.alterEstateToken,
        message,
        context.userLocation
      );
      
      if (properties.length === 0) {
        // No se encontraron propiedades, dar respuesta personalizada
        const conversationContext = this.conversationContexts.get(conversationId) || [];
        const systemPrompt = this.buildSystemPrompt(context) + 
          '\n\nNOTA: No se encontraron propiedades que coincidan con los criterios. Sugiere ajustar la b√∫squeda o recomendar √°reas alternativas.';
        
        const messages = [
          { role: "system", content: systemPrompt },
          ...conversationContext,
          { role: "user", content: message }
        ];

        const response = await this.openaiClient.chat.completions.create({
          model: "gpt-4o",
          messages: messages as any,
          max_tokens: 300,
          temperature: 0.7,
        });

        return response.choices[0].message.content || 'No encontr√© propiedades disponibles con esos criterios. ¬øTe gustar√≠a ajustar tu b√∫squeda?';
      }
      
      // Si hay m√∫ltiples propiedades (2 o m√°s), usar carrusel interactivo
      if (properties.length >= 2) {
        console.log(`üé† [AI] Found ${properties.length} properties, preparing carousel`);
        
        // Preparar datos para carrusel
        const carouselData = alterEstateService.formatPropertiesForCarousel(properties);
        
        // Marcar que se debe enviar carrusel
        pendingMediaQueue.set(conversationId, {
          type: 'carousel',
          properties: carouselData,
          timestamp: Date.now()
        });
        
        const propertyNames = properties.map(p => p.name).join(', ');
        return `üè† Encontr√© ${properties.length} propiedades que podr√≠an interesarte: ${propertyNames}. Te estoy preparando las tarjetas interactivas con toda la informaci√≥n...`;
      }
      
      // Para una sola propiedad, usar formato de texto tradicional
      const formattedProperties = alterEstateService.formatPropertiesForAI(properties);
      
      // Generar respuesta contextual usando IA
      const conversationContext = this.conversationContexts.get(conversationId) || [];
      const systemPrompt = this.buildSystemPrompt(context) + 
        '\n\nINSTRUCCIONES ESPECIALES: Tienes acceso a propiedades reales del CRM. Presenta estas propiedades de manera natural y conversacional. Ofrece agendar visitas y crear leads si el cliente muestra inter√©s.';
      
      const propertyPrompt = `El usuario pregunt√≥: "${message}"

He encontrado estas propiedades reales disponibles en nuestro CRM:

${formattedProperties}

Presenta estas propiedades de manera natural y conversacional. Destaca las caracter√≠sticas m√°s relevantes y pregunta si le gustar√≠a m√°s informaci√≥n, fotos o agendar una visita.`;

      const messages = [
        { role: "system", content: systemPrompt },
        ...conversationContext,
        { role: "user", content: propertyPrompt }
      ];

      const response = await this.openaiClient.chat.completions.create({
        model: "gpt-4o",
        messages: messages as any,
        max_tokens: 600,
        temperature: 0.7,
      });

      const aiResponse = response.choices[0].message.content || formattedProperties;
      
      // Update conversation context
      conversationContext.push(
        { role: "user", content: message },
        { role: "assistant", content: aiResponse }
      );

      // Keep only last 10 messages for context
      if (conversationContext.length > 20) {
        conversationContext.splice(0, conversationContext.length - 20);
      }

      this.conversationContexts.set(conversationId, conversationContext);
      
      console.log(`‚úÖ [AI] Property search response generated with ${properties.length} real properties`);
      return aiResponse;
      
    } catch (error) {
      console.error('‚ùå [AI] Error in property search:', error);
      return 'Disculpa, tuve un problema consultando nuestro inventario de propiedades. ¬øPodr√≠as repetir tu b√∫squeda?';
    }
  }

  /**
   * Detectar si el usuario est√° solicitando fotos/videos de propiedades
   */
  private isRequestingPropertyMedia(message: string): boolean {
    const messageLower = message.toLowerCase();
    
    // Palabras clave relacionadas con solicitar ver contenido visual
    const mediaKeywords = [
      'foto', 'fotos', 'imagen', 'im√°genes', 'video', 'videos',
      'ver', 'muestra', 'ense√±a', 'galer√≠a', 'picture', 'photo',
      'mira', 'env√≠a', 'manda', 'comparte', 'visual', 'aspecto',
      'c√≥mo se ve', 'que tal se ve', 'ver como es', 'podria ver',
      'puedes mostrar', 'me puedes enviar', 'tienes fotos'
    ];
    
    // Referencias a propiedades espec√≠ficas
    const propertyKeywords = [
      'propiedad', 'apartament', 'casa', 'inmueble', 'villa',
      'penthouse', 'property', 'unit', 'building', 'lugar',
      'esa', 'esta', 'ese', 'este', 'del que', 'de la que',
      'que se encuentra', 'ubicado', 'ubicada', 'en la calle',
      'en el', 'en la', 'el de', 'la de'
    ];
    
    const hasMediaKeyword = mediaKeywords.some(keyword => messageLower.includes(keyword));
    const hasPropertyKeyword = propertyKeywords.some(keyword => messageLower.includes(keyword));
    
    // Detectar patrones espec√≠ficos de solicitud de fotos
    const mediaPatterns = [
      /podria?\s+ver\s+(foto|imagen)/i,
      /puedes?\s+(mostrar|enviar|mandar)\s+(foto|imagen)/i,
      /ver\s+(foto|imagen).*?(del?|de\s+la?)\s+(que|propiedad|casa|apartament)/i,
      /foto.*?(del?|de\s+la?)\s+(que|propiedad|casa|apartament)/i
    ];
    
    const hasMediaPattern = mediaPatterns.some(pattern => pattern.test(message));
    
    console.log(`üîç [AI] Media detection for: "${message}"`);
    console.log(`üì∏ [AI] Has media keyword: ${hasMediaKeyword}, property keyword: ${hasPropertyKeyword}, pattern: ${hasMediaPattern}`);
    
    return hasMediaPattern || (hasMediaKeyword && hasPropertyKeyword);
  }

  /**
   * Procesar solicitud de medios de propiedades
   */
  private async processPropertyMediaRequest(message: string, context: any, conversationId: string): Promise<string> {
    try {
      console.log('üì∏ [AI] Processing property media request');
      
      if (!context.alterEstateEnabled || !context.alterEstateToken) {
        return 'Para poder enviarte fotos de propiedades, necesito que AlterEstate CRM est√© configurado en las configuraciones.';
      }
      
      // Extract property ID from message if mentioned
      const propertyIdMatch = message.match(/([A-Z0-9]{8,12})/); // AlterEstate UIDs are typically 8-12 chars
      
      let propertySlug: string | null = null;
      let property: any = null;
      
      if (propertyIdMatch) {
        propertySlug = propertyIdMatch[1];
        console.log(`üè† [AI] Property ID extracted from message: ${propertySlug}`);
      } else {
        // Try to get property from recent conversation context first
        propertySlug = await this.extractPropertyFromContext(conversationId);
        console.log(`üè† [AI] Property extracted from context: ${propertySlug}`);
        
        // If no property in context, search for property by location/description
        if (!propertySlug) {
          console.log('üîç [AI] No property ID found, searching by location/description');
          const { alterEstateService } = await import('./alterEstateService');
          
          // Search for properties matching the description
          const searchResult = await alterEstateService.intelligentPropertySearch(
            context.alterEstateToken,
            message,
            context.userLocation
          );
          
          if (searchResult.length > 0) {
            property = searchResult[0]; // Take the first match
            propertySlug = property.slug;
            console.log(`üè† [AI] Found property by search: ${propertySlug} (${property.name})`);
          }
        }
      }
      
      if (!propertySlug) {
        return 'Me gustar√≠a enviarte las fotos, pero ¬øde cu√°l propiedad espec√≠ficamente? Por favor menciona el ID de la propiedad que te interesa, o hazme una b√∫squeda de propiedades primero.';
      }
      
      // Get property media from AlterEstate
      const { alterEstateService } = await import('./alterEstateService');
      const media = await alterEstateService.getPropertyMedia(context.alterEstateToken, propertySlug);
      
      // Send media through WhatsApp queue system
      await this.sendPropertyMedia(conversationId, propertySlug, media);
      
      if (media.images.length === 0 && !media.featuredImage) {
        return 'Esta propiedad no tiene fotos disponibles en este momento. ¬øTe gustar√≠a que coordine una visita para que puedas verla en persona?';
      }
      
      // This special message triggers the WhatsApp controller to send the actual photos
      let response = `Te estoy preparando las fotos de esta propiedad. Un momento por favor...`;
      
      if (media.images.length > 0) {
        response = `üì∏ Te estoy preparando ${media.images.length + (media.featuredImage ? 1 : 0)} fotos de esta propiedad. Un momento por favor...`;
      }
      
      if (media.virtualTour) {
        response += `\n\nüé• Tambi√©n incluir√© el tour virtual.`;
      }
      
      return response;
      
    } catch (error) {
      console.error('‚ùå [AI] Error processing media request:', error);
      return 'Disculpa, tuve un problema obteniendo las fotos de la propiedad. ¬øPodr√≠as intentar de nuevo o especificar qu√© propiedad te interesa?';
    }
  }

  /**
   * Extraer ID de propiedad del contexto de conversaci√≥n reciente
   */
  private async extractPropertyFromContext(conversationId: string): Promise<string | null> {
    try {
      const conversationContext = this.conversationContexts.get(conversationId) || [];
      
      // Buscar mensajes del asistente que contengan IDs de propiedades
      for (let i = conversationContext.length - 1; i >= 0; i--) {
        const msg = conversationContext[i];
        if (msg.role === 'assistant' && msg.content) {
          const propertyIdMatch = msg.content.match(/\*\*ID\*\*:\s*([A-Z0-9]{8,12})/);
          if (propertyIdMatch) {
            return propertyIdMatch[1];
          }
        }
      }
      
      return null;
    } catch (error) {
      console.error('‚ùå [AI] Error extracting property from context:', error);
      return null;
    }
  }

  /**
   * Enviar fotos/videos de propiedad a trav√©s de WhatsApp
   */
  private async sendPropertyMedia(conversationId: string, propertySlug: string, media: any): Promise<void> {
    try {
      // Marcar que se deben enviar medios para esta conversaci√≥n
      // Esto ser√° manejado por el controlador de WhatsApp despu√©s del mensaje de texto
      const mediaQueue = {
        conversationId,
        propertySlug,
        images: media.images,
        featuredImage: media.featuredImage,
        virtualTour: media.virtualTour,
        timestamp: Date.now()
      };
      
      // Guardar en memoria temporal para que el controlador pueda acceder
      pendingMediaQueue.set(conversationId, mediaQueue);
      
      console.log(`üì∏ [AI] Media queued for conversation: ${conversationId}`);
    } catch (error) {
      console.error('‚ùå [AI] Error queuing media:', error);
    }
  }

  /**
   * Obtener y limpiar media pendiente para una conversaci√≥n
   */
  static getPendingMedia(conversationId: string): any {
    const media = pendingMediaQueue.get(conversationId);
    if (media) {
      pendingMediaQueue.delete(conversationId);
    }
    return media;
  }

  /**
   * Crear lead autom√°ticamente en AlterEstate cuando hay inter√©s
   */
  async createLeadFromConversation(
    context: any,
    clientPhone: string,
    clientName: string,
    propertyUid?: string,
    notes?: string
  ): Promise<boolean> {
    try {
      if (!context.alterEstateEnabled || !context.alterEstateApiKey) {
        console.log('‚ö†Ô∏è [AI] AlterEstate not configured for lead creation');
        return false;
      }
      
      const { alterEstateService } = await import('./alterEstateService');
      
      const leadData = {
        full_name: clientName || 'Cliente WhatsApp',
        phone: clientPhone,
        email: `${clientPhone}@whatsapp.com`, // Temporal email
        property_uid: propertyUid,
        notes: notes || 'Lead generado autom√°ticamente desde WhatsApp',
        via: 'WhatsApp Bot',
      };
      
      console.log('üìù [AI] Creating lead in AlterEstate:', leadData);
      
      const result = await alterEstateService.createLead(context.alterEstateApiKey, leadData);
      
      console.log('‚úÖ [AI] Lead created successfully:', result);
      return true;
      
    } catch (error) {
      console.error('‚ùå [AI] Error creating lead:', error);
      return false;
    }
  }

  clearConversationContext(conversationId: string) {
    this.conversationContexts.delete(conversationId);
  }
}

export const aiService = new AIService();
