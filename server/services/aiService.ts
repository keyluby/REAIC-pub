import OpenAI from "openai";

// Queue para media pendientes de env√≠o
const pendingMediaQueue = new Map<string, any>();

export class AIService {
  private openaiClient: OpenAI;
  private conversationContexts = new Map<string, any[]>();

  constructor() {
    const apiKey = process.env.OPENAI_API_KEY || '';
    if (!apiKey) {
      console.error('‚ùå OPENAI_API_KEY environment variable is not set');
    } else {
      console.log('‚úÖ OpenAI API key is configured');
    }
    
    this.openaiClient = new OpenAI({ 
      apiKey: apiKey
    });
  }

  async processConversation(userId: string, conversationId: string, message: string, context: any = {}) {
    try {
      console.log(`ü§ñ Processing AI conversation for user ${userId}, conversation ${conversationId}`);
      console.log(`üìù User message: "${message}"`);
      
      // Check if AlterEstate integration is enabled
      if (context.alterEstateEnabled && context.alterEstateToken) {
        console.log('üèòÔ∏è [AI] AlterEstate integration enabled, checking for property search intent');
        
        // FIRST: Check if user is requesting property media (photos/videos) - this has priority
        if (this.isRequestingPropertyMedia(message)) {
          console.log('üì∏ [AI] Property media request detected');
          return await this.processPropertyMediaRequest(message, context, conversationId);
        }
        
        // SECOND: Detect if user is searching for properties or providing additional search criteria
        const conversationContext = this.conversationContexts.get(conversationId) || [];
        const intent = await this.detectIntentWithContext(message, conversationContext);
        
        if ((intent.intent === 'search_property' || intent.intent === 'refine_search') && intent.confidence > 0.6) {
          console.log(`üîç [AI] ${intent.intent} intent detected, querying AlterEstate`);
          return await this.processPropertySearch(message, context, conversationId, intent.intent === 'refine_search');
        }
        
        // THIRD: Detect if user wants more details about a specific property
        if (intent.intent === 'property_details' && intent.confidence > 0.6) {
          console.log(`üìã [AI] Property details request detected`);
          return await this.processPropertyDetailsRequest(message, context, conversationId);
        }
      }
      
      // Get conversation context
      const conversationContext = this.conversationContexts.get(conversationId) || [];
      
      // Build system prompt
      const systemPrompt = this.buildSystemPrompt(context);
      
      // Prepare messages for OpenAI
      const messages = [
        { role: "system", content: systemPrompt },
        ...conversationContext,
        { role: "user", content: message }
      ];

      console.log(`üì§ Sending request to OpenAI with ${messages.length} messages`);

      // Usando GPT-4o temporalmente para estabilidad
      const response = await this.openaiClient.chat.completions.create({
        model: "gpt-4o", // Usando GPT-4o temporalmente para estabilidad
        messages: messages as any,
        max_tokens: 500,
        temperature: 0.7,
      });

      const aiResponse = response.choices[0].message.content || '';
      console.log(`‚úÖ AI response received: "${aiResponse}"`);

      // Update conversation context
      conversationContext.push(
        { role: "user", content: message },
        { role: "assistant", content: aiResponse }
      );

      // Keep only last 10 messages for context
      if (conversationContext.length > 20) {
        conversationContext.splice(0, conversationContext.length - 20);
      }

      this.conversationContexts.set(conversationId, conversationContext);

      return aiResponse;
    } catch (error: any) {
      console.error('‚ùå Error processing conversation with AI:');
      console.error('Error details:', error.response?.data || error.message);
      console.error('Status:', error.response?.status);
      console.error('Full error:', error);
      
      // Return a fallback message instead of throwing
      return 'Disculpa, estoy teniendo problemas t√©cnicos en este momento. ¬øPodr√≠as repetir tu mensaje en unos minutos?';
    }
  }

  private buildSystemPrompt(context: any): string {
    const assistantName = context.assistantName || 'Asistente IA';
    
    // Use custom system prompt if provided, otherwise use default
    if (context.customSystemPrompt && context.customSystemPrompt.trim()) {
      return context.customSystemPrompt;
    }
    
    return this.getDefaultSystemPrompt(assistantName, context.alterEstateEnabled);
  }

  private getDefaultSystemPrompt(assistantName: string, alterEstateEnabled: boolean = false): string {
    return `Eres ${assistantName}, un asistente de ventas inmobiliarias experto. Tu objetivo es ayudar a los clientes a encontrar la propiedad perfecta de manera conversacional y humana.

PERSONALIDAD:
- Profesional pero amigable
- Emp√°tico y consultivo
- Orientado a soluciones
- Paciente y detallado
- C√°lido y personal - recuerdas las conversaciones anteriores

MEMORIA DE CONVERSACI√ìN:
- CRUCIAL: Siempre revisa el historial de la conversaci√≥n antes de responder
- Si el cliente ha mencionado preferencias anteriormente, recu√©rdalas y √∫salas
- Con cada interacci√≥n, s√© m√°s amigable y cercano
- Reconoce cuando es segunda, tercera, o cuarta vez que interact√∫as con el cliente
- Haz comentarios personales basados en informaci√≥n previa: "Como mencionaste antes..." o "Recordando lo que buscabas..."
- NUNCA preguntes informaci√≥n que ya tienes del historial de conversaci√≥n

PROCESO DE CALIFICACI√ìN:
1. Saludo personalizado (m√°s c√°lido si ya conoces al cliente)
2. Revisar preferencias previas si existen
3. Determinar tipo de b√∫squeda (compra/alquiler) - solo si no lo sabes ya
4. Establecer presupuesto y moneda - solo si no lo tienes ya
5. Identificar ubicaci√≥n preferida - solo si no la conoces ya
6. Determinar caracter√≠sticas requeridas - solo las que falten
7. Mostrar opciones relevantes
8. Agendar visita si hay inter√©s

REGLAS:
- SIEMPRE revisa la conversaci√≥n previa antes de hacer cualquier pregunta
- M√°ximo 3 propiedades por respuesta
- Incluye detalles relevantes cuando muestres propiedades
- Usa informaci√≥n actualizada del CRM
- Ofrece agendar visitas cuando hay inter√©s
- Si el cliente quiere hablar con una persona real, indica que puedes transferir la conversaci√≥n${alterEstateEnabled ? '\n- ‚ö†Ô∏è IMPORTANTE: Cuando se requiera informaci√≥n sobre propiedades, SOLAMENTE proporciona datos que se encuentren en AlterEstate CRM. NO inventes ni uses informaci√≥n general sobre propiedades que no est√© disponible en el sistema CRM.' : ''}

FILTRADO DE PROPIEDADES EN ALTERESTATE:
Existen dos tipos de propiedades en el CRM con diferentes campos de datos:

1. PROPIEDADES INDIVIDUALES:
   - Habitaciones: campo "room"
   - Ba√±os: campo "bathroom"
   - √Årea: campo "property_area" + "property_area_measurer"
   - Estacionamientos: campo "parkinglot"
   - Condiciones de venta/alquiler: campos booleanos "forSale", "forRent", "forRental"
   - Amueblado: campo booleano "furnished"
   - Video disponible: campo "youtubeiframe"
   - Precios espec√≠ficos: "sale_price", "rent_price", "furnished_price"

2. PROYECTOS INMOBILIARIOS (DESARROLLOS):
   - Datos t√©cnicos en campo "variations" (array de unidades disponibles)
   - Cada unidad tiene: "room", "bathroom", "property_area", "parkinglot"
   - Para mostrar rangos: "Desde X hasta Y habitaciones/ba√±os/m¬≤"
   - Im√°genes en: "gallery_images" y "featured_image"

IMPORTANTE PARA RECOMENDACIONES:
- Cuando un cliente solicite propiedades, filtra por ambos tipos
- Para propiedades individuales: usa los campos directos mencionados arriba
- Para proyectos: usa el array "variations" para encontrar unidades que coincidan
- Siempre considera tanto las condiciones (venta/alquiler/amueblado) como las especificaciones t√©cnicas
- Prioriza propiedades que coincidan exactamente con los requisitos del cliente

CONVERSI√ìN AUTOM√ÅTICA DE PRECIOS (SOLO PARA FILTRADO):
- El sistema tiene configurada una tasa de cambio USD/Peso actualizada regularmente
- IMPORTANTE: La conversi√≥n SOLO se usa para expandir b√∫squedas, NO para cambiar precios mostrados
- Los precios SIEMPRE se muestran al cliente tal como fueron publicados originalmente
- Cuando un cliente busque en USD: autom√°ticamente incluye propiedades en pesos (ampliando opciones)
- Cuando un cliente busque en pesos: autom√°ticamente incluye propiedades en USD (ampliando opciones)
- Ejemplo de b√∫squeda: Cliente busca "hasta US$ 100,000" ‚Üí Sistema encuentra propiedades hasta US$ 100,000 Y propiedades hasta RD$ 6,000,000
- Ejemplo de presentaci√≥n: Una propiedad de RD$ 4,500,000 se muestra como "RD$ 4,500,000" (precio original), NO convertida a USD
- Esto maximiza opciones sin alterar la informaci√≥n original de cada propiedad

CAPACIDADES DE IM√ÅGENES:
- S√ç PUEDES enviar fotos de propiedades cuando el cliente las solicite
- Tienes acceso a la galer√≠a de im√°genes de cada propiedad a trav√©s de AlterEstate
- Cuando alguien pida fotos, puedes obtenerlas y enviarlas autom√°ticamente
- No digas "no puedo enviar fotos" - en su lugar, menciona que las est√°s preparando
- Si no tienes la propiedad espec√≠fica, pregunta cu√°l le interesa o sugiere hacer una b√∫squeda

FORMATO DE RESPUESTA:
- Usa emojis apropiados pero con moderaci√≥n
- Mant√©n un tono profesional pero cercano
- Haz preguntas espec√≠ficas para entender mejor las necesidades
- Proporciona informaci√≥n valiosa en cada respuesta
- Siempre reconoce el contexto previo cuando existe`;
  }

  async generatePropertyRecommendations(userPreferences: any, availableProperties: any[]) {
    try {
      const prompt = `Bas√°ndote en las siguientes preferencias del cliente:
${JSON.stringify(userPreferences, null, 2)}

Y las siguientes propiedades disponibles:
${JSON.stringify(availableProperties.slice(0, 10), null, 2)}

Recomienda las 3 mejores propiedades que mejor se ajusten a las necesidades del cliente. 
Responde en formato JSON con esta estructura:
{
  "recommendations": [
    {
      "propertyId": "string",
      "matchScore": number,
      "reasons": ["reason1", "reason2"],
      "highlights": "string"
    }
  ]
}`;

      const response = await this.openaiClient.chat.completions.create({
        model: "gpt-4o", // Usando GPT-4o temporalmente para estabilidad
        messages: [{ role: "user", content: prompt }],
        response_format: { type: "json_object" },
        max_tokens: 800,
        temperature: 0.7,
      });

      return JSON.parse(response.choices[0].message.content || '{"recommendations": []}');
    } catch (error) {
      console.error('Error generating property recommendations:', error);
      throw new Error('Failed to generate property recommendations');
    }
  }

  async transcribeAudio(audioBuffer: Buffer, mimeType: string = 'audio/wav'): Promise<string> {
    try {
      console.log(`üé§ [AI] Transcribing audio of ${audioBuffer.length} bytes`);
      
      // Create a temporary file for the audio
      const tempFile = new File([audioBuffer], 'audio.wav', { type: mimeType });
      
      const transcription = await this.openaiClient.audio.transcriptions.create({
        file: tempFile,
        model: "whisper-1",
        language: "es", // Spanish for real estate context
      });

      console.log(`‚úÖ [AI] Audio transcribed: "${transcription.text}"`);
      return transcription.text;
    } catch (error) {
      console.error('‚ùå [AI] Error transcribing audio:', error);
      throw new Error('Failed to transcribe audio');
    }
  }

  async analyzeImage(imageBase64: string): Promise<string> {
    try {
      const response = await this.openaiClient.chat.completions.create({
        model: "gpt-4o", // Usando GPT-4o temporalmente para estabilidad
        messages: [
          {
            role: "user",
            content: [
              {
                type: "text",
                text: "Analiza esta imagen en el contexto de bienes ra√≠ces. Describe lo que ves y si podr√≠a ser relevante para una b√∫squeda de propiedades. Responde como un asistente inmobiliario profesional en espa√±ol, siendo √∫til y espec√≠fico."
              },
              {
                type: "image_url",
                image_url: {
                  url: `data:image/jpeg;base64,${imageBase64}`
                }
              }
            ],
          },
        ],
        max_tokens: 300,
        temperature: 0.7,
      });

      return response.choices[0].message.content || 'No pude analizar la imagen';
    } catch (error) {
      console.error('Error analyzing image:', error);
      throw new Error('Failed to analyze image');
    }
  }

  async detectIntent(message: string): Promise<{
    intent: string;
    confidence: number;
    entities?: any;
  }> {
    try {
      const prompt = `Analiza el siguiente mensaje de un cliente de bienes ra√≠ces y determina la intenci√≥n principal:

Mensaje: "${message}"

Posibles intenciones:
- "search_property": buscar propiedades
- "schedule_appointment": agendar cita
- "ask_question": hacer pregunta general
- "request_info": solicitar informaci√≥n espec√≠fica
- "escalate_human": hablar con persona real
- "greeting": saludo
- "complaint": queja o problema
- "goodbye": despedida

Responde en formato JSON:
{
  "intent": "string",
  "confidence": number (0-1),
  "entities": {
    "budget": number_or_null,
    "location": "string_or_null",
    "property_type": "string_or_null",
    "urgency": "low|medium|high"
  }
}`;

      const response = await this.openaiClient.chat.completions.create({
        model: "gpt-4o", // Usando GPT-4o temporalmente para estabilidad  
        messages: [{ role: "user", content: prompt }],
        response_format: { type: "json_object" },
        max_tokens: 500,
        temperature: 0.7,
      });

      return JSON.parse(response.choices[0].message.content || '{"intent": "ask_question", "confidence": 0.5}');
    } catch (error) {
      console.error('Error detecting intent:', error);
      return { intent: "ask_question", confidence: 0.5 };
    }
  }

  async detectIntentWithContext(message: string, conversationContext: any[]): Promise<{
    intent: string;
    confidence: number;
    entities?: any;
  }> {
    try {
      // Analizar el contexto de conversaci√≥n para detectar b√∫squedas previas
      const contextSummary = conversationContext.slice(-6).map(msg => 
        `${msg.role}: ${msg.content}`
      ).join('\n');

      const prompt = `Analiza el siguiente mensaje de un cliente de bienes ra√≠ces considerando el contexto de la conversaci√≥n anterior:

Contexto previo de la conversaci√≥n:
${contextSummary}

Mensaje actual: "${message}"

Posibles intenciones:
- "search_property": buscar propiedades (nueva b√∫squeda)
- "refine_search": refinar o agregar informaci√≥n a una b√∫squeda anterior
- "property_details": solicitar m√°s informaci√≥n/detalles sobre una propiedad espec√≠fica ya mostrada
- "schedule_appointment": agendar cita
- "ask_question": hacer pregunta general
- "request_info": solicitar informaci√≥n espec√≠fica
- "escalate_human": hablar con persona real
- "greeting": saludo
- "complaint": queja o problema
- "goodbye": despedida

IMPORTANTE: 
- Si el contexto muestra b√∫squedas previas de propiedades y el mensaje actual proporciona informaci√≥n adicional (presupuesto, preferencias, etc.), usa "refine_search".
- Si el mensaje solicita m√°s informaci√≥n, detalles, descripci√≥n o caracter√≠sticas espec√≠ficas de una propiedad ya mostrada, usa "property_details".
- Patrones para "property_details": "m√°s informaci√≥n", "detalles", "descripci√≥n", "cu√©ntame m√°s", "del que tiene", "de la que tiene", "informaci√≥n adicional"

Responde en formato JSON:
{
  "intent": "string",
  "confidence": number (0-1),
  "entities": {
    "budget": number_or_null,
    "location": "string_or_null",
    "property_type": "string_or_null",
    "urgency": "low|medium|high"
  }
}`;

      const response = await this.openaiClient.chat.completions.create({
        model: "gpt-4o",
        messages: [{ role: "user", content: prompt }],
        response_format: { type: "json_object" },
        max_tokens: 500,
        temperature: 0.7,
      });

      return JSON.parse(response.choices[0].message.content || '{"intent": "ask_question", "confidence": 0.5}');
    } catch (error) {
      console.error('Error detecting intent with context:', error);
      return { intent: "ask_question", confidence: 0.5 };
    }
  }

  /**
   * Procesar b√∫squeda de propiedades usando AlterEstate
   */
  private async processPropertySearch(message: string, context: any, conversationId: string, isRefinement: boolean = false): Promise<string> {
    try {
      const { alterEstateService } = await import('./alterEstateService');
      
      let searchQuery = message;
      
      // Si es un refinamiento, combinar con contexto de b√∫squedas anteriores
      if (isRefinement) {
        const conversationContext = this.conversationContexts.get(conversationId) || [];
        const previousSearches = conversationContext
          .filter(msg => msg.role === 'user')
          .map(msg => msg.content)
          .join(' ');
        
        searchQuery = `${previousSearches} ${message}`;
        console.log(`üîÑ [AI] Refining previous search with new criteria: "${message}"`);
        console.log(`üîç [AI] Combined search query: "${searchQuery}"`);
      } else {
        console.log('üîç [AI] Starting new property search');
        
        // SISTEMA DE CALIFICACI√ìN: Verificar si tenemos criterios suficientes para b√∫squeda
        const qualificationStatus = await this.assessClientQualification(searchQuery, conversationId);
        console.log(`üéØ [AI] Qualification status:`, qualificationStatus);
        
        if (!qualificationStatus.isQualified) {
          console.log(`‚ùì [AI] Client not qualified yet, asking qualifying questions`);
          const qualifyingResponse = await this.askQualifyingQuestions(qualificationStatus, context);
          
          // CR√çTICO: Actualizar contexto de conversaci√≥n con la pregunta de calificaci√≥n
          const conversationContext = this.conversationContexts.get(conversationId) || [];
          conversationContext.push(
            { role: "user", content: message },
            { role: "assistant", content: qualifyingResponse }
          );
          
          // Mantener solo √∫ltimos 20 mensajes
          if (conversationContext.length > 20) {
            conversationContext.splice(0, conversationContext.length - 20);
          }
          
          this.conversationContexts.set(conversationId, conversationContext);
          console.log(`üíæ [AI] Updated conversation context with qualifying question`);
          
          return qualifyingResponse;
        }
        
        console.log(`‚úÖ [AI] Client qualified, proceeding with targeted search`);
      }
      
      // Buscar propiedades reales usando AlterEstate
      console.log('üîç [AI] Searching real properties in AlterEstate');
      const properties = await alterEstateService.intelligentPropertySearch(
        context.alterEstateToken,
        searchQuery,
        context.userLocation
      );
      
      if (properties.length === 0) {
        console.log(`‚ùå [AI] No properties found, providing helpful suggestions`);
        
        // Analizar los criterios de b√∫squeda para dar sugerencias espec√≠ficas
        const searchAnalysis = await this.analyzeFailedSearch(searchQuery, context);
        
        // Dar respuesta personalizada considerando el historial y sugerir alternativas espec√≠ficas
        const conversationContext = this.conversationContexts.get(conversationId) || [];
        
        const helpfulSuggestions = this.generateAlternativeSuggestions(searchQuery, searchAnalysis);
        
        const contextNote = isRefinement 
          ? '\n\nNOTA: El cliente est√° refinando una b√∫squeda anterior pero no hay propiedades que coincidan exactamente. Reconoce que recuerdas sus preferencias previas, explica por qu√© no hay coincidencias exactas, y sugiere alternativas √∫tiles basadas en su historial. Mant√©n un tono c√°lido y personalizado. Ofrece opciones como: aumentar presupuesto, considerar √°reas cercanas, o cambiar algunos criterios espec√≠ficos.'
          : '\n\nNOTA: No se encontraron propiedades que coincidan exactamente con los criterios. S√© emp√°tico y espec√≠fico sobre por qu√© no hay resultados, y proporciona sugerencias constructivas para encontrar opciones. Ofrece ajustar presupuesto, considerar √°reas alternativas, o modificar criterios espec√≠ficos. Siempre mant√©n esperanza de ayudar a encontrar algo.';
          
        const systemPrompt = this.buildSystemPrompt(context) + contextNote;
        
        const detailedPrompt = `El usuario busca: "${message}"
        
Los criterios de b√∫squeda analizados son:
${searchAnalysis}

Sugerencias espec√≠ficas para el cliente:
${helpfulSuggestions}

Responde de manera emp√°tica y constructiva. Explica brevemente por qu√© no hay resultados exactos y ofrece alternativas espec√≠ficas y √∫tiles. Pregunta qu√© prefiere hacer: ajustar criterios, ver √°reas alternativas, o cambiar el presupuesto.`;

        const messages = [
          { role: "system", content: systemPrompt },
          ...conversationContext,
          { role: "user", content: detailedPrompt }
        ];

        const response = await this.openaiClient.chat.completions.create({
          model: "gpt-4o",
          messages: messages as any,
          max_tokens: 400,
          temperature: 0.7,
        });

        const aiResponse = response.choices[0].message.content || 'No encontr√© propiedades disponibles con esos criterios exactos, pero puedo ayudarte a encontrar opciones similares. ¬øTe gustar√≠a ajustar alg√∫n criterio de tu b√∫squeda?';
        
        // Update conversation context
        conversationContext.push(
          { role: "user", content: message },
          { role: "assistant", content: aiResponse }
        );

        // Keep only last 20 messages for context
        if (conversationContext.length > 20) {
          conversationContext.splice(0, conversationContext.length - 20);
        }

        this.conversationContexts.set(conversationId, conversationContext);
        
        return aiResponse;
      }
      
      // Para m√∫ltiples propiedades, usar formato carrusel
      if (properties.length >= 2) {
        console.log(`üé† [AI] Found ${properties.length} properties, formatting as carousel`);
        
        // Format properties for recommendations (limit to 6 as specified)
        const carouselProperties = alterEstateService.formatPropertiesForCarousel(
          properties.slice(0, 6), // Limit to 6 property recommendations
          context.realEstateWebsiteUrl
        );

        console.log(`üé† [AI] Formatted ${carouselProperties.length} properties for carousel`);
        
        // Send properties as carousel via WhatsApp
        try {
          const { evolutionApiService } = await import('./evolutionApiService');
          const instanceName = `instance_${context.userId}`;
          
          // Extract phone number from conversationId - need to implement this properly
          let phoneNumber = context.phoneNumber;
          
          // Try to extract from various sources
          if (!phoneNumber) {
            // If conversationId contains phone number (like "18292639382@s.whatsapp.net")
            const phoneMatch = conversationId.match(/(\d{10,15})/);
            phoneNumber = phoneMatch ? phoneMatch[1] : null;
          }
          
          if (!phoneNumber) {
            console.error('‚ùå [AI] No phone number available for carousel');
            throw new Error('No phone number available');
          }
          
          console.log(`üì± [AI] Sending carousel via ${instanceName} to ${phoneNumber}`);
          
          const result = await evolutionApiService.sendPropertyRecommendations(
            instanceName,
            phoneNumber,
            carouselProperties
          );
          
          if (result.success) {
            console.log(`‚úÖ [AI] Property recommendations sent successfully: ${result.messageIds.length} messages`);
            
            // Update conversation context with a summary
            const conversationContext = this.conversationContexts.get(conversationId) || [];
            const contextSummary = `Se enviaron ${carouselProperties.length} propiedades recomendadas (una por mensaje con foto):
${carouselProperties.map((p, i) => `${i + 1}. ${p.title} - ${p.price} (ID: ${p.uid})`).join('\n')}`;
            
            conversationContext.push(
              { role: "user", content: message },
              { role: "assistant", content: contextSummary }
            );

            // Keep only last 20 messages for context
            if (conversationContext.length > 20) {
              conversationContext.splice(0, conversationContext.length - 20);
            }

            this.conversationContexts.set(conversationId, conversationContext);
            
            // Return success message for internal tracking
            return `Propiedades enviadas como recomendaciones: ${carouselProperties.length} mensajes individuales con fotos`;
          } else {
            console.error('‚ùå [AI] Failed to send property recommendations, falling back to text format');
            throw new Error('Property recommendations send failed');
          }
          
        } catch (recommendationError) {
          console.error('‚ùå [AI] Error sending property recommendations:', recommendationError);
          console.log('üîÑ [AI] FORCING individual recommendations - NO fallback to text...');
          
          // FORCE individual property sending - no fallback
          console.log('üîß [AI] Attempting forced individual property sending...');
          
          // Import and setup required services
          const { evolutionApiService: evolutionService } = await import('./evolutionApiService');
          const instanceName = `instance_${context.userId}`;
          
          // Extract phone number from conversationId
          let phoneNumber = context.phoneNumber;
          if (!phoneNumber) {
            const phoneMatch = conversationId.match(/(\d{10,15})/);
            phoneNumber = phoneMatch ? phoneMatch[1] : null;
          }
          
          if (!phoneNumber) {
            console.error('‚ùå [AI] No phone number available for forced sending');
            return `Error: No se pudo determinar el n√∫mero de tel√©fono`;
          }
          
          console.log(`üì± [AI] Force sending to ${phoneNumber} via ${instanceName}`);
          
          for (let i = 0; i < Math.min(carouselProperties.length, 6); i++) {
            const property = carouselProperties[i];
            try {
              const caption = `üè† *${property.title}*\n\nüí∞ ${property.price}\nüè† ${property.description}\nüìç ID: ${property.uid}\n\nüîó ${property.propertyUrl}`;
              
              console.log(`üì§ [AI] Sending individual property ${i + 1}/${carouselProperties.length}`);
              
              // Force simple text message per property for now
              const result = await evolutionService.sendMessage(
                instanceName,
                phoneNumber,
                caption
              );
              
              if (result.success) {
                console.log(`‚úÖ [AI] Property ${i + 1} sent successfully`);
              } else {
                console.log(`‚ùå [AI] Property ${i + 1} failed to send`);
              }
              
              // Small delay between properties
              if (i < carouselProperties.length - 1) {
                await new Promise(resolve => setTimeout(resolve, 1500));
              }
            } catch (forceError) {
              console.error(`‚ùå [AI] Failed to force send property ${i + 1}:`, forceError);
            }
          }
          
          return `Propiedades enviadas individualmente: ${carouselProperties.length} mensajes separados`;
          
          // OLD FALLBACK CODE - Disabled to force individual sending
          /*
          const propertiesToShow = properties.slice(0, 5);
          const propertiesText = propertiesToShow.map((property, index) => {
            const salePrice = property.sale_price;
            const currency = property.currency_sale || 'USD';
            const formattedPrice = salePrice && typeof salePrice === 'number' 
              ? `${currency} ${salePrice.toLocaleString()}`
              : 'Precio a consultar';
            
            const propertyUrl = alterEstateService.getPropertyPublicUrl(
              property.slug, 
              context.realEstateWebsiteUrl
            );
            
            return `${index + 1}. üè† **${property.name}**
üí∞ ${formattedPrice}
üè† ${property.room || 'N/A'} hab ‚Ä¢ üöø ${property.bathroom || 'N/A'} ba√±os
üìç ${property.sector || 'Sector no especificado'}, ${property.city || 'Ciudad no especificada'}
üîó Ver detalles: ${propertyUrl}`;
          }).join('\n\n');

          const moreProperties = properties.length > 5 ? `\n\n‚ûï *Tengo ${properties.length - 5} propiedades adicionales que podr√≠an interesarte.*` : '';
          
          if (isRefinement) {
            return `Perfecto! üòä Considerando tu presupuesto y las preferencias que me has mencionado, aqu√≠ tienes las mejores opciones:\n\n${propertiesText}${moreProperties}\n\n¬øTe interesa alguna en particular? Puedo ayudarte con m√°s informaci√≥n, fotos o para agendar una visita. üóìÔ∏è`;
          } else {
            return `üè† ¬°Encontr√© ${properties.length} excelentes opciones para ti!\n\n${propertiesText}${moreProperties}\n\n¬øCu√°l te llama m√°s la atenci√≥n? Puedo ayudarte con m√°s informaci√≥n, fotos o para agendar una visita. üóìÔ∏è`;
          }
          */
        }
      }
      
      // Para una sola propiedad, tambi√©n usar formato carrusel para consistencia
      console.log(`üé† [AI] Found 1 property, formatting as single carousel card`);
      
      // Format single property for carousel display
      const carouselProperties = alterEstateService.formatPropertiesForCarousel(
        [properties[0]], 
        context.realEstateWebsiteUrl
      );

      // Send single property as carousel via WhatsApp
      try {
        const { evolutionApiService } = await import('./evolutionApiService');
        const instanceName = `instance_${context.userId}`;
        
        // Extract phone number from conversationId
        let phoneNumber = context.phoneNumber;
        
        // Try to extract from various sources
        if (!phoneNumber) {
          // If conversationId contains phone number (like "18292639382@s.whatsapp.net")
          const phoneMatch = conversationId.match(/(\d{10,15})/);
          phoneNumber = phoneMatch ? phoneMatch[1] : null;
        }
        
        if (!phoneNumber) {
          console.error('‚ùå [AI] No phone number available for carousel');
          throw new Error('No phone number available');
        }
        
        console.log(`üì± [AI] Sending single property carousel via ${instanceName} to ${phoneNumber}`);
        
        const result = await evolutionApiService.sendPropertyRecommendations(
          instanceName,
          phoneNumber,
          carouselProperties
        );
        
        if (result.success) {
          console.log(`‚úÖ [AI] Single property carousel sent successfully`);
          
          // Update conversation context with a summary
          const conversationContext = this.conversationContexts.get(conversationId) || [];
          const property = carouselProperties[0];
          const contextSummary = `Se envi√≥ 1 propiedad en formato carrusel con foto y botones interactivos: ${property.title} - ${property.price} (ID: ${property.uid})`;
          
          conversationContext.push(
            { role: "user", content: message },
            { role: "assistant", content: contextSummary }
          );

          // Keep only last 20 messages for context
          if (conversationContext.length > 20) {
            conversationContext.splice(0, conversationContext.length - 20);
          }

          this.conversationContexts.set(conversationId, conversationContext);
          
          // Return success message for internal tracking
          return `Propiedad enviada en formato carrusel con foto y botones`;
        } else {
          console.error('‚ùå [AI] Failed to send single property carousel, falling back to text format');
          throw new Error('Single property carousel send failed');
        }
        
      } catch (carouselError) {
        console.error('‚ùå [AI] Error sending single property carousel:', carouselError);
        console.log('üîÑ [AI] Falling back to text format for single property...');
        
        // Fallback to existing text format for single property
        const property = properties[0];
        const propertyUrl = alterEstateService.getPropertyPublicUrl(
          property.slug, 
          context.realEstateWebsiteUrl
        );
        
        // Formato mejorado para una sola propiedad con enlace directo
        const salePrice = property.sale_price;
        const currency = property.currency_sale || 'RD$';
        const formattedPrice = salePrice && typeof salePrice === 'number' 
          ? `${currency} ${salePrice.toLocaleString()}`
          : 'Precio a consultar';
        
        const categoryName = property.category && typeof property.category === 'object' 
          ? property.category.name 
          : property.category || 'Tipo no especificado';
        
        const enhancedPropertyInfo = `üè† **${property.name || 'Propiedad sin nombre'}**

üí∞ **Precio**: ${formattedPrice}
üè¢ **Tipo**: ${categoryName}
üè† **Habitaciones**: ${property.room || 'N/A'}
üöø **Ba√±os**: ${property.bathroom || 'N/A'}
üìç **Ubicaci√≥n**: ${property.sector || 'Sector no especificado'}, ${property.city || 'Ciudad no especificada'}

üîó **Ver publicaci√≥n completa**: ${propertyUrl}

üìù **Descripci√≥n**: ${property.short_description || 'Informaci√≥n disponible en el enlace'}`;
        
        // Generar respuesta contextual usando IA
        const conversationContext = this.conversationContexts.get(conversationId) || [];
        const contextInstructions = isRefinement 
          ? '\n\nINSTRUCCIONES ESPECIALES: El cliente est√° refinando una b√∫squeda anterior. Reconoce que recuerdas sus preferencias previas y presenta esta propiedad como resultado de haber considerado toda su informaci√≥n. S√© c√°lido, personal y muestra que has estado atento a sus necesidades. Tienes acceso a propiedades reales del CRM. SIEMPRE incluye el enlace directo a la publicaci√≥n. Ofrece agendar visitas y crear leads.'
          : '\n\nINSTRUCCIONES ESPECIALES: Tienes acceso a propiedades reales del CRM. Presenta estas propiedades de manera natural y conversacional. SIEMPRE incluye el enlace directo a la publicaci√≥n. Ofrece agendar visitas y crear leads si el cliente muestra inter√©s.';
          
        const systemPrompt = this.buildSystemPrompt(context) + contextInstructions;
        
        const propertyPrompt = isRefinement 
          ? `El usuario ha estado refinando su b√∫squeda y ahora dice: "${message}"

Bas√°ndome en toda nuestra conversaci√≥n y sus criterios, he encontrado esta propiedad real que se ajusta perfectamente:

${enhancedPropertyInfo}

Presenta esta propiedad reconociendo que recuerdas sus preferencias anteriores. Destaca c√≥mo esta propiedad cumple con los criterios que ha mencionado, menciona que puede ver la publicaci√≥n completa en el enlace proporcionado, y pregunta si le gustar√≠a agendar una visita o ver m√°s fotos.`
          : `El usuario pregunt√≥: "${message}"

He encontrado esta propiedad real disponible en nuestro CRM:

${enhancedPropertyInfo}

Presenta esta propiedad de manera natural y conversacional. Destaca las caracter√≠sticas m√°s relevantes, menciona que puede ver la publicaci√≥n completa en el enlace proporcionado, y pregunta si le gustar√≠a agendar una visita o ver m√°s fotos.`;

      const messages = [
        { role: "system", content: systemPrompt },
        ...conversationContext,
        { role: "user", content: propertyPrompt }
      ];

      const response = await this.openaiClient.chat.completions.create({
        model: "gpt-4o",
        messages: messages as any,
        max_tokens: 600,
        temperature: 0.7,
      });

      const aiResponse = response.choices[0].message.content || enhancedPropertyInfo;
      
      // Update conversation context
      conversationContext.push(
        { role: "user", content: message },
        { role: "assistant", content: aiResponse }
      );

      // Keep only last 10 messages for context
      if (conversationContext.length > 20) {
        conversationContext.splice(0, conversationContext.length - 20);
      }

      this.conversationContexts.set(conversationId, conversationContext);
      
      return aiResponse;
    }
      
    } catch (error) {
      console.error('‚ùå [AI] Error in property search:', error);
      return 'Disculpa, tuve un problema consultando nuestro inventario de propiedades. ¬øPodr√≠as repetir tu b√∫squeda?';
    }
  }

  /**
   * Detectar si el usuario est√° solicitando fotos/videos de propiedades
   */
  private isRequestingPropertyMedia(message: string): boolean {
    const messageLower = message.toLowerCase();
    
    // Palabras clave relacionadas con solicitar ver contenido visual
    const mediaKeywords = [
      'foto', 'fotos', 'imagen', 'im√°genes', 'video', 'videos',
      'ver', 'muestra', 'ense√±a', 'galer√≠a', 'picture', 'photo',
      'mira', 'env√≠a', 'manda', 'comparte', 'visual', 'aspecto',
      'c√≥mo se ve', 'que tal se ve', 'ver como es', 'podria ver',
      'puedes mostrar', 'me puedes enviar', 'tienes fotos'
    ];
    
    // Referencias a propiedades espec√≠ficas
    const propertyKeywords = [
      'propiedad', 'apartament', 'casa', 'inmueble', 'villa',
      'penthouse', 'property', 'unit', 'building', 'lugar',
      'esa', 'esta', 'ese', 'este', 'del que', 'de la que',
      'que se encuentra', 'ubicado', 'ubicada', 'en la calle',
      'en el', 'en la', 'el de', 'la de'
    ];
    
    const hasMediaKeyword = mediaKeywords.some(keyword => messageLower.includes(keyword));
    const hasPropertyKeyword = propertyKeywords.some(keyword => messageLower.includes(keyword));
    
    // Detectar patrones espec√≠ficos de solicitud de fotos
    const mediaPatterns = [
      /podria?\s+ver\s+(foto|imagen)/i,
      /puedes?\s+(mostrar|enviar|mandar)\s+(foto|imagen)/i,
      /ver\s+(foto|imagen).*?(del?|de\s+la?)\s+(que|propiedad|casa|apartament)/i,
      /foto.*?(del?|de\s+la?)\s+(que|propiedad|casa|apartament)/i,
      // NUEVOS PATRONES m√°s flexibles para solicitudes en contexto
      /puedes?\s+(enviar|mandar|mostrar).*?(foto|imagen)/i,
      /tienes?\s+(foto|imagen)/i,
      /^(foto|imagen|ver)/i, // Mensajes que empiezan con foto/imagen/ver
      /(enviar|mandar|mostrar).*?(foto|imagen)/i,
      /ver\s+como\s+(es|est√°|se\s+ve)/i
    ];
    
    const hasMediaPattern = mediaPatterns.some(pattern => pattern.test(message));
    
    console.log(`üîç [AI] Media detection for: "${message}"`);
    console.log(`üì∏ [AI] Has media keyword: ${hasMediaKeyword}, property keyword: ${hasPropertyKeyword}, pattern: ${hasMediaPattern}`);
    
    // L√ìGICA MEJORADA: Tambi√©n considerar solicitudes gen√©ricas cuando existe contexto
    // Si hay una palabra clave de media Y el mensaje es corto (sugiere que est√° en contexto)
    const isShortMediaRequest = hasMediaKeyword && message.trim().length <= 30;
    
    // Si es una solicitud espec√≠fica con patr√≥n O si tiene keywords relevantes
    const isMediaRequest = hasMediaPattern || (hasMediaKeyword && hasPropertyKeyword) || isShortMediaRequest;
    
    console.log(`üì∏ [AI] Short media request: ${isShortMediaRequest}, Final result: ${isMediaRequest}`);
    
    return isMediaRequest;
  }

  /**
   * Procesar solicitud de medios de propiedades
   */
  private async processPropertyMediaRequest(message: string, context: any, conversationId: string): Promise<string> {
    try {
      console.log('üì∏ [AI] Processing property media request');
      
      if (!context.alterEstateEnabled || !context.alterEstateToken) {
        return 'Para poder enviarte fotos de propiedades, necesito que AlterEstate CRM est√© configurado en las configuraciones.';
      }
      
      // Extract property ID from message if mentioned
      const propertyIdMatch = message.match(/([A-Z0-9]{8,12})/); // AlterEstate UIDs are typically 8-12 chars
      
      let propertySlug: string | null = null;
      let property: any = null;
      
      if (propertyIdMatch) {
        propertySlug = propertyIdMatch[1];
        console.log(`üè† [AI] Property ID extracted from message: ${propertySlug}`);
      } else {
        // Try to get property from recent conversation context first
        propertySlug = await this.extractPropertyFromContext(conversationId);
        console.log(`üè† [AI] Property extracted from context: ${propertySlug}`);
        
        // If no property in context, search for property by location/description
        if (!propertySlug) {
          console.log('üîç [AI] No property ID found, searching by location/description');
          const { alterEstateService } = await import('./alterEstateService');
          
          // Search for properties matching the description
          const searchResult = await alterEstateService.intelligentPropertySearch(
            context.alterEstateToken,
            message,
            context.userLocation
          );
          
          if (searchResult.length > 0) {
            property = searchResult[0]; // Take the first match
            propertySlug = property.slug;
            console.log(`üè† [AI] Found property by search: ${propertySlug} (${property.name})`);
          }
        }
      }
      
      if (!propertySlug) {
        return 'Me gustar√≠a enviarte las fotos, pero ¬øde cu√°l propiedad espec√≠ficamente? Por favor menciona el ID de la propiedad que te interesa, o hazme una b√∫squeda de propiedades primero.';
      }
      
      // Get property media from AlterEstate
      const { alterEstateService } = await import('./alterEstateService');
      const media = await alterEstateService.getPropertyMedia(context.alterEstateToken, propertySlug);
      
      // Send media through WhatsApp queue system
      await this.sendPropertyMedia(conversationId, propertySlug, media);
      
      if (media.images.length === 0 && !media.featuredImage) {
        return 'Esta propiedad no tiene fotos disponibles en este momento. ¬øTe gustar√≠a que coordine una visita para que puedas verla en persona?';
      }
      
      // Send media through queue and return a simple confirmation
      console.log(`üì∏ [AI] Media queued successfully for property ${propertySlug}`);
      
      // Return a simple response without promising specific number of photos
      let response = `üì∏ Te env√≠o las fotos de esta propiedad.`;
      
      if (media.virtualTour) {
        response += `\n\nüé• Tambi√©n incluir√© el tour virtual.`;
      }
      
      return response;
      
    } catch (error) {
      console.error('‚ùå [AI] Error processing media request:', error);
      return 'Disculpa, tuve un problema obteniendo las fotos de la propiedad. ¬øPodr√≠as intentar de nuevo o especificar qu√© propiedad te interesa?';
    }
  }

  /**
   * Procesar solicitud de detalles adicionales de una propiedad
   */
  private async processPropertyDetailsRequest(message: string, context: any, conversationId: string): Promise<string> {
    try {
      console.log('üìã [AI] Processing property details request');
      
      if (!context.alterEstateEnabled || !context.alterEstateToken) {
        return 'Para poder obtener informaci√≥n detallada de propiedades, necesito que AlterEstate CRM est√© configurado en las configuraciones.';
      }
      
      // Try to extract property ID from message or context
      const propertyIdMatch = message.match(/([A-Z0-9]{8,12})/);
      let propertySlug: string | null = null;
      
      if (propertyIdMatch) {
        propertySlug = propertyIdMatch[1];
        console.log(`üè† [AI] Property ID extracted from message: ${propertySlug}`);
      } else {
        // Try to get property from recent conversation context
        propertySlug = await this.extractPropertyFromContext(conversationId);
        console.log(`üè† [AI] Property extracted from context: ${propertySlug}`);
      }
      
      if (!propertySlug) {
        // Check if user is referring to a property by description/feature from context
        const matchResult = await this.findPropertiesByDescription(message, conversationId, context);
        
        if (matchResult.matches.length === 1) {
          propertySlug = matchResult.matches[0].slug;
          console.log(`üè† [AI] Single property found by contextual description: ${propertySlug}`);
        } else if (matchResult.matches.length > 1) {
          console.log(`‚ö†Ô∏è [AI] Multiple properties match the description, asking for clarification`);
          return this.buildClarificationResponse(matchResult.matches, matchResult.feature);
        } else {
          return 'Para darte m√°s informaci√≥n espec√≠fica, ¬øpodr√≠as mencionar el ID de la propiedad que te interesa? O puedo hacer una nueva b√∫squeda si me das algunos criterios.';
        }
      }
      
      // Get detailed property information from AlterEstate
      const { alterEstateService } = await import('./alterEstateService');
      
      try {
        if (!propertySlug) {
          return 'No pude identificar la propiedad espec√≠fica. ¬øPodr√≠as proporcionar el ID de la propiedad?';
        }
        const propertyDetails = await alterEstateService.getPropertyDetail(context.alterEstateToken, propertySlug);
        
        if (!propertyDetails) {
          return 'No pude encontrar informaci√≥n detallada de esa propiedad. ¬øPodr√≠as verificar el ID o hacer una nueva b√∫squeda?';
        }
        
        // Build detailed response using description and agent information
        const propertyUrl = alterEstateService.getPropertyPublicUrl(
          propertySlug, 
          context.realEstateWebsiteUrl || ''
        );
        
        let detailedResponse = `üè† **${propertyDetails.name || 'Propiedad'}**\n\n`;
        
        // Add price and basic info
        const salePrice = propertyDetails.sale_price;
        const currency = propertyDetails.currency_sale || 'RD$';
        const formattedPrice = salePrice && typeof salePrice === 'number' 
          ? `${currency} ${salePrice.toLocaleString()}`
          : 'Precio a consultar';
        
        detailedResponse += `üí∞ **Precio**: ${formattedPrice}\n`;
        detailedResponse += `üè¢ **Tipo**: ${propertyDetails.category || 'No especificado'}\n`;
        detailedResponse += `üè† **Habitaciones**: ${propertyDetails.room || 'N/A'}\n`;
        detailedResponse += `üöø **Ba√±os**: ${propertyDetails.bathroom || 'N/A'}\n`;
        detailedResponse += `üìç **Ubicaci√≥n**: ${propertyDetails.sector || ''}, ${propertyDetails.city || ''}\n\n`;
        
        // Add description if available
        if (propertyDetails.description && propertyDetails.description.trim()) {
          detailedResponse += `üìù **Descripci√≥n completa**:\n${propertyDetails.description}\n\n`;
        } else if (propertyDetails.short_description && propertyDetails.short_description.trim()) {
          detailedResponse += `üìù **Descripci√≥n**:\n${propertyDetails.short_description}\n\n`;
        }
        
        // Add agent contact information if available
        const agentInfo = propertyDetails.agents && propertyDetails.agents.length > 0 ? propertyDetails.agents[0] : null;
        if (agentInfo && (agentInfo.full_name || agentInfo.phone || agentInfo.email)) {
          detailedResponse += `üë§ **Contacto del agente**:\n`;
          if (agentInfo.full_name) {
            detailedResponse += `üìû **Agente**: ${agentInfo.full_name}\n`;
          }
          if (agentInfo.phone) {
            detailedResponse += `üì± **Tel√©fono**: ${agentInfo.phone}\n`;
          }
          if (agentInfo.email) {
            detailedResponse += `üìß **Email**: ${agentInfo.email}\n`;
          }
          detailedResponse += '\n';
        }
        
        detailedResponse += `üîó **Ver publicaci√≥n completa**: ${propertyUrl}\n\n`;
        detailedResponse += `¬øTe gustar√≠a agendar una visita, ver las fotos o tienes alguna otra pregunta espec√≠fica sobre esta propiedad?`;
        
        return detailedResponse;
        
      } catch (error) {
        console.error('‚ùå [AI] Error getting property details:', error);
        return 'Disculpa, tuve un problema obteniendo los detalles de la propiedad. ¬øPodr√≠as intentar de nuevo?';
      }
      
    } catch (error) {
      console.error('‚ùå [AI] Error processing property details request:', error);
      return 'Disculpa, tuve un problema procesando tu solicitud. ¬øPodr√≠as intentar de nuevo?';
    }
  }

  /**
   * Analizar una b√∫squeda fallida para entender por qu√© no hay resultados
   */
  private async analyzeFailedSearch(searchQuery: string, context: any): Promise<string> {
    try {
      console.log(`üîç [AI] Analyzing failed search: "${searchQuery}"`);
      
      // Extraer criterios espec√≠ficos de la b√∫squeda
      const analysis = [];
      
      // Analizar ubicaci√≥n
      const locationKeywords = ['santiago', 'santo domingo', 'punta cana', 'zona colonial', 'bella vista', 'cacique'];
      const mentionedLocation = locationKeywords.find(loc => searchQuery.toLowerCase().includes(loc));
      if (mentionedLocation) {
        analysis.push(`üìç Ubicaci√≥n solicitada: ${mentionedLocation}`);
      }
      
      // Analizar presupuesto
      const budgetMatches = searchQuery.match(/(\d+)\s*(dolar|dollar|usd|rd\$|peso)/i);
      if (budgetMatches) {
        analysis.push(`üí∞ Presupuesto mencionado: ${budgetMatches[0]}`);
      }
      
      // Analizar habitaciones
      const roomMatches = searchQuery.match(/(\d+)\s*(hab|habitacion|bedroom)/i);
      if (roomMatches) {
        analysis.push(`üè† Habitaciones solicitadas: ${roomMatches[0]}`);
      }
      
      // Analizar tipo de operaci√≥n
      const isRental = searchQuery.toLowerCase().includes('alquil') || searchQuery.toLowerCase().includes('rent');
      const isSale = searchQuery.toLowerCase().includes('compr') || searchQuery.toLowerCase().includes('venta') || searchQuery.toLowerCase().includes('sale');
      if (isRental) {
        analysis.push(`üîë Tipo: Alquiler`);
      } else if (isSale) {
        analysis.push(`üè∑Ô∏è Tipo: Venta`);
      }
      
      return analysis.length > 0 ? analysis.join('\n') : 'Criterios de b√∫squeda generales';
      
    } catch (error) {
      console.error('‚ùå [AI] Error analyzing failed search:', error);
      return 'B√∫squeda espec√≠fica solicitada';
    }
  }

  /**
   * Generar sugerencias alternativas espec√≠ficas
   */
  private generateAlternativeSuggestions(searchQuery: string, analysis: string): string {
    const suggestions = [];
    
    // Sugerencias basadas en ubicaci√≥n
    if (searchQuery.toLowerCase().includes('santiago')) {
      suggestions.push('‚Ä¢ Considera tambi√©n √°reas cercanas como Licey o Tamboril');
      suggestions.push('‚Ä¢ Explora sectores populares como Gurabo o Villa Bison√≥');
    }
    
    if (searchQuery.toLowerCase().includes('santo domingo')) {
      suggestions.push('‚Ä¢ Revisa sectores adyacentes como Bella Vista, Cacique, o Hidalgos');
      suggestions.push('‚Ä¢ Considera el Distrito Nacional o zonas como Gazcue');
    }
    
    // Sugerencias basadas en presupuesto
    const budgetMatch = searchQuery.match(/(\d+)/);
    if (budgetMatch) {
      const budget = parseInt(budgetMatch[1]);
      if (budget < 1000) {
        suggestions.push(`‚Ä¢ Considera incrementar el presupuesto ligeramente para m√°s opciones`);
        suggestions.push(`‚Ä¢ Revisa propiedades en sectores emergentes con mejor precio`);
      }
    }
    
    // Sugerencias basadas en habitaciones
    const roomMatch = searchQuery.match(/(\d+)\s*hab/);
    if (roomMatch) {
      const rooms = parseInt(roomMatch[1]);
      if (rooms >= 3) {
        suggestions.push(`‚Ä¢ Considera propiedades de ${rooms - 1} habitaciones m√°s espaciosas`);
        suggestions.push(`‚Ä¢ Revisa casas en lugar de apartamentos para m√°s espacio`);
      }
    }
    
    // Sugerencias generales
    suggestions.push('‚Ä¢ Ampl√≠a el rango de precios para ver m√°s opciones');
    suggestions.push('‚Ä¢ Considera propiedades en diferentes sectores de la misma ciudad');
    suggestions.push('‚Ä¢ Revisa tanto apartamentos como casas para m√°s variedad');
    
    return suggestions.slice(0, 4).join('\n'); // Limitar a 4 sugerencias para no saturar
  }

  /**
   * Construir respuesta de clarificaci√≥n cuando hay m√∫ltiples propiedades que coinciden
   */
  private buildClarificationResponse(matches: any[], feature: string): string {
    console.log(`üîç [AI] Building clarification response for ${matches.length} matches with feature: ${feature}`);
    
    let response = `Encontr√© ${matches.length} propiedades que tienen ${feature}. ¬øPodr√≠as ser m√°s espec√≠fico sobre cu√°l te interesa?\n\n`;
    
    matches.forEach((match, index) => {
      // Extract basic info from the property context
      const locationMatch = match.content.match(/(santo domingo|punta cana|santiago|[^,\n]+),?\s+([^,\n]+)/i);
      const priceMatch = match.content.match(/(us\$|rd\$|\$)\s*[\d,]+/i);
      const roomMatch = match.content.match(/(\d+)\s*(hab|habitacion)/i);
      
      let description = `${index + 1}. `;
      if (locationMatch) {
        description += `üìç ${locationMatch[0]}`;
      }
      if (priceMatch) {
        description += ` - üí∞ ${priceMatch[0]}`;
      }
      if (roomMatch) {
        description += ` - üè† ${roomMatch[0]}`;
      }
      description += ` (ID: ${match.slug})`;
      
      response += description + '\n';
    });
    
    response += '\nPuedes responder con el n√∫mero de la propiedad o mencionando alguna caracter√≠stica espec√≠fica adicional.';
    
    return response;
  }

  /**
   * Buscar propiedades por descripci√≥n/caracter√≠sticas en el contexto de la conversaci√≥n
   */
  private async findPropertiesByDescription(message: string, conversationId: string, context: any): Promise<{matches: any[], feature: string}> {
    try {
      const conversationContext = this.conversationContexts.get(conversationId) || [];
      console.log(`üîç [AI] Searching for property by description: "${message}"`);
      
      // Extract properties mentioned in recent conversation context
      const recentProperties: any[] = [];
      
      for (let i = conversationContext.length - 1; i >= 0 && i >= conversationContext.length - 10; i--) {
        const msg = conversationContext[i];
        if (msg.role === 'assistant' && msg.content) {
          // Look for property IDs and associated information
          const propertyMatches = msg.content.match(/\*\*ID\*\*:\s*([A-Z0-9]{8,12})[^]*?(?=\*\*ID\*\*|$)/g);
          if (propertyMatches) {
            for (const match of propertyMatches) {
              const idMatch = match.match(/\*\*ID\*\*:\s*([A-Z0-9]{8,12})/);
              if (idMatch) {
                const propertyId = idMatch[1];
                recentProperties.push({
                  slug: propertyId,
                  content: match.toLowerCase()
                });
              }
            }
          }
          
          // Also look for properties in URLs (as backup)
          const urlMatches = msg.content.match(/https:\/\/[^\s]+\/propiedad\/([^\/\s]+)/g);
          if (urlMatches) {
            for (const urlMatch of urlMatches) {
              const slugMatch = urlMatch.match(/\/propiedad\/([^\/\s]+)/);
              if (slugMatch) {
                const slug = slugMatch[1];
                const contextAround = this.getContextAroundUrl(msg.content, urlMatch);
                recentProperties.push({
                  slug: slug,
                  content: contextAround.toLowerCase()
                });
              }
            }
          }
        }
      }
      
      console.log(`üè† [AI] Found ${recentProperties.length} recent properties in context`);
      
      if (recentProperties.length === 0) {
        return { matches: [], feature: '' };
      }
      
      // Extract key features from user's message
      const messageLower = message.toLowerCase();
      const features = this.extractPropertyFeatures(messageLower);
      
      console.log(`üîç [AI] Extracted features from message:`, features);
      
      // Find matching properties
      const matches = recentProperties.filter(property => {
        return features.some(feature => property.content.includes(feature));
      });
      
      console.log(`üéØ [AI] Found ${matches.length} matching properties`);
      
      const mainFeature = features.length > 0 ? features[0] : 'la caracter√≠stica mencionada';
      
      return {
        matches: matches,
        feature: mainFeature
      };
      
    } catch (error) {
      console.error('‚ùå [AI] Error finding property by description:', error);
      return { matches: [], feature: '' };
    }
  }

  /**
   * Extraer caracter√≠sticas/features de un mensaje
   */
  private extractPropertyFeatures(message: string): string[] {
    const features: string[] = [];
    
    // Features relacionadas con espacios exteriores
    if (message.includes('terraza') || message.includes('terrace')) {
      features.push('terraza', 'terrace');
    }
    if (message.includes('balcon') || message.includes('balc√≥n')) {
      features.push('balcon', 'balc√≥n');
    }
    if (message.includes('jard√≠n') || message.includes('jardin')) {
      features.push('jard√≠n', 'jardin');
    }
    
    // Features relacionadas con n√∫mero de habitaciones
    const roomMatches = message.match(/(\d+)\s*(hab|habitacion|habitaciones|bedroom)/);
    if (roomMatches) {
      features.push(`${roomMatches[1]} hab`, `${roomMatches[1]} habitacion`);
    }
    
    // Features relacionadas con precio
    const priceMatches = message.match(/(us\$|rd\$|\$)\s*[\d,]+/);
    if (priceMatches) {
      features.push(priceMatches[0]);
    }
    
    // Features relacionadas con ubicaci√≥n
    const locations = ['santo domingo', 'punta cana', 'santiago', 'zona colonial', 'bella vista', 'cacique', 'hidalgos', 'monumenta'];
    for (const location of locations) {
      if (message.includes(location)) {
        features.push(location);
      }
    }
    
    // Features relacionadas con tipo
    if (message.includes('apartamento') || message.includes('apartment')) {
      features.push('apartamento', 'apartment');
    }
    if (message.includes('casa') || message.includes('house')) {
      features.push('casa', 'house');
    }
    if (message.includes('villa')) {
      features.push('villa');
    }
    
    return features;
  }

  /**
   * Obtener contexto alrededor de una URL en un texto
   */
  private getContextAroundUrl(content: string, url: string): string {
    const urlIndex = content.indexOf(url);
    if (urlIndex === -1) return content;
    
    const start = Math.max(0, urlIndex - 200);
    const end = Math.min(content.length, urlIndex + url.length + 200);
    
    return content.substring(start, end);
  }

  /**
   * Extraer ID de propiedad del contexto de conversaci√≥n reciente
   */
  private async extractPropertyFromContext(conversationId: string): Promise<string | null> {
    try {
      const conversationContext = this.conversationContexts.get(conversationId) || [];
      
      // Buscar mensajes del asistente que contengan IDs de propiedades
      for (let i = conversationContext.length - 1; i >= 0; i--) {
        const msg = conversationContext[i];
        if (msg.role === 'assistant' && msg.content) {
          const propertyIdMatch = msg.content.match(/\*\*ID\*\*:\s*([A-Z0-9]{8,12})/);
          if (propertyIdMatch) {
            return propertyIdMatch[1];
          }
        }
      }
      
      return null;
    } catch (error) {
      console.error('‚ùå [AI] Error extracting property from context:', error);
      return null;
    }
  }

  /**
   * Enviar fotos/videos de propiedad a trav√©s de WhatsApp
   */
  private async sendPropertyMedia(conversationId: string, propertySlug: string, media: any): Promise<void> {
    try {
      // Marcar que se deben enviar medios para esta conversaci√≥n
      // Esto ser√° manejado por el controlador de WhatsApp despu√©s del mensaje de texto
      const mediaQueue = {
        conversationId,
        propertySlug,
        images: media.images,
        featuredImage: media.featuredImage,
        virtualTour: media.virtualTour,
        timestamp: Date.now()
      };
      
      // Guardar en memoria temporal para que el controlador pueda acceder
      pendingMediaQueue.set(conversationId, mediaQueue);
      
      console.log(`üì∏ [AI] Media queued for conversation: ${conversationId}`);
    } catch (error) {
      console.error('‚ùå [AI] Error queuing media:', error);
    }
  }

  /**
   * Obtener y limpiar media pendiente para una conversaci√≥n
   */
  static getPendingMedia(conversationId: string): any {
    const media = pendingMediaQueue.get(conversationId);
    if (media) {
      pendingMediaQueue.delete(conversationId);
    }
    return media;
  }

  /**
   * Crear lead autom√°ticamente en AlterEstate cuando hay inter√©s
   */
  async createLeadFromConversation(
    context: any,
    clientPhone: string,
    clientName: string,
    propertyUid?: string,
    notes?: string
  ): Promise<boolean> {
    try {
      if (!context.alterEstateEnabled || !context.alterEstateApiKey) {
        console.log('‚ö†Ô∏è [AI] AlterEstate not configured for lead creation');
        return false;
      }
      
      const { alterEstateService } = await import('./alterEstateService');
      
      const leadData = {
        full_name: clientName || 'Cliente WhatsApp',
        phone: clientPhone,
        email: `${clientPhone}@whatsapp.com`, // Temporal email
        property_uid: propertyUid,
        notes: notes || 'Lead generado autom√°ticamente desde WhatsApp',
        via: 'WhatsApp Bot',
      };
      
      console.log('üìù [AI] Creating lead in AlterEstate:', leadData);
      
      const result = await alterEstateService.createLead(context.alterEstateApiKey, leadData);
      
      console.log('‚úÖ [AI] Lead created successfully:', result);
      return true;
      
    } catch (error) {
      console.error('‚ùå [AI] Error creating lead:', error);
      return false;
    }
  }

  /**
   * Evaluar si el cliente ha proporcionado criterios suficientes para una b√∫squeda dirigida
   */
  private async assessClientQualification(message: string, conversationId: string): Promise<{
    isQualified: boolean;
    missingCriteria: string[];
    extractedCriteria: any;
  }> {
    try {
      const conversationContext = this.conversationContexts.get(conversationId) || [];
      const fullConversation = conversationContext.map(msg => `${msg.role}: ${msg.content}`).join('\n');
      
      const prompt = `Analiza la conversaci√≥n de este cliente de bienes ra√≠ces para determinar si tiene criterios suficientes para una b√∫squeda dirigida:

Conversaci√≥n completa:
${fullConversation}
Mensaje actual: "${message}"

Criterios ESENCIALES para b√∫squeda dirigida:
1. Presupuesto aproximado (rango m√≠nimo/m√°ximo)
2. N√∫mero de habitaciones (preferido)
3. Zona espec√≠fica o sectores preferidos
4. Tipo de operaci√≥n (compra/alquiler) - si no est√° claro asumir compra

Criterios ADICIONALES √∫tiles:
- N√∫mero de ba√±os
- √Årea aproximada en m¬≤
- Amenidades espec√≠ficas
- Urgencia de la b√∫squeda

Responde en JSON:
{
  "isQualified": boolean,
  "missingCriteria": ["criterio1", "criterio2"],
  "extractedCriteria": {
    "operation": "compra|alquiler|null",
    "property_type": "apartamento|casa|local|null",
    "budget_min": number_or_null,
    "budget_max": number_or_null,
    "currency": "USD|DOP|null",
    "rooms": number_or_null,
    "bathrooms": number_or_null,
    "zones": ["zona1", "zona2"] or ["cualquier_zona"] or null,
    "area_min": number_or_null,
    "area_max": number_or_null
  }
}

IMPORTANTE: 
- Solo marcar isQualified=true si tiene al menos: presupuesto, habitaciones Y zona espec√≠fica.
- Si el cliente dice "cualquier zona de [ciudad]" o "en toda la ciudad", extraer como zones: ["cualquier_zona"] y considerar como zona v√°lida.
- Ejemplos de zonas v√°lidas: "Piantini", "Naco", "cualquier zona de Santo Domingo", "toda la ciudad"`;

      const response = await this.openaiClient.chat.completions.create({
        model: "gpt-4o",
        messages: [{ role: "user", content: prompt }],
        response_format: { type: "json_object" },
        max_tokens: 800,
        temperature: 0.3,
      });

      return JSON.parse(response.choices[0].message.content || '{"isQualified": false, "missingCriteria": ["presupuesto", "habitaciones", "zona"], "extractedCriteria": {}}');
    } catch (error) {
      console.error('Error assessing client qualification:', error);
      return {
        isQualified: false,
        missingCriteria: ["presupuesto", "habitaciones", "zona"],
        extractedCriteria: {}
      };
    }
  }

  /**
   * Hacer preguntas de calificaci√≥n profesionales basadas en lo que falta
   */
  private async askQualifyingQuestions(qualificationStatus: any, context: any): Promise<string> {
    const { missingCriteria, extractedCriteria } = qualificationStatus;
    
    // Construir preguntas inteligentes basadas en lo que ya tenemos
    let questions = [];
    let currentInfo = "";
    
    // Mostrar lo que ya sabemos
    if (extractedCriteria.property_type) {
      currentInfo += `Perfecto, veo que buscas ${extractedCriteria.property_type}`;
      if (extractedCriteria.operation) {
        currentInfo += ` para ${extractedCriteria.operation}`;
      }
      currentInfo += ". ";
    }
    
    // Preguntar por presupuesto si falta
    if (missingCriteria.includes("presupuesto")) {
      questions.push("üí∞ ¬øCu√°l es tu presupuesto aproximado? (puedes darme un rango, ej: entre 100k-200k USD)");
    }
    
    // Preguntar por habitaciones si falta
    if (missingCriteria.includes("habitaciones")) {
      questions.push("üè† ¬øCu√°ntas habitaciones necesitas?");
    }
    
    // Preguntar por zona si falta
    if (missingCriteria.includes("zona")) {
      questions.push(`üìç ¬øEn qu√© zona o sector espec√≠fico te gustar√≠a? (ej: Evaristo Morales, Piantini, Arroyo Hondo, etc.)`);
    }
    
    // Preguntar por ba√±os si no se ha mencionado
    if (!extractedCriteria.bathrooms && questions.length < 3) {
      questions.push("üöø ¬øCu√°ntos ba√±os prefieres?");
    }
    
    // Respuesta profesional y c√°lida
    const greeting = currentInfo || "¬°Excelente! Me encanta ayudarte a encontrar la propiedad perfecta. ";
    const explanation = "Para mostrarte las mejores opciones que realmente se ajusten a tus necesidades, necesito conocer algunos detalles importantes:\n\n";
    const questionsList = questions.slice(0, 3).map((q, i) => `${i + 1}. ${q}`).join('\n');
    const closing = "\n\nCon esta informaci√≥n podr√© ofrecerte propiedades que realmente valgan la pena tu tiempo. üòä";
    
    return greeting + explanation + questionsList + closing;
  }

  clearConversationContext(conversationId: string) {
    this.conversationContexts.delete(conversationId);
  }
}

export const aiService = new AIService();
